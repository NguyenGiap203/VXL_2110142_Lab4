
Buttons.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000269c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080027a8  080027a8  000127a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027d8  080027d8  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  080027d8  080027d8  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027d8  080027d8  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027d8  080027d8  000127d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027dc  080027dc  000127dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  080027e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000050  08002830  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08002830  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098af  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c41  00000000  00000000  00029928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002b570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002c010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001702f  00000000  00000000  0002c998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c688  00000000  00000000  000439c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008254d  00000000  00000000  0005004f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d259c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002948  00000000  00000000  000d25f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000050 	.word	0x20000050
 8000128:	00000000 	.word	0x00000000
 800012c:	08002790 	.word	0x08002790

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000054 	.word	0x20000054
 8000148:	08002790 	.word	0x08002790

0800014c <isButtonPressed>:

uint8_t button_flag[NO_OF_BUTTONS] = {0};

int counterAutoIncresing[NO_OF_BUTTONS] = {0};

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	4413      	add	r3, r2
 800015a:	781b      	ldrb	r3, [r3, #0]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4413      	add	r3, r2
 8000166:	2200      	movs	r2, #0
 8000168:	701a      	strb	r2, [r3, #0]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	2000007c 	.word	0x2000007c

08000180 <getKeyInput>:

void getKeyInput(){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e078      	b.n	800027e <getKeyInput+0xfe>
		debounceBuffer1[i] = debounceBuffer2[i];
 800018c:	4a40      	ldr	r2, [pc, #256]	; (8000290 <getKeyInput+0x110>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4413      	add	r3, r2
 8000192:	7819      	ldrb	r1, [r3, #0]
 8000194:	4a3f      	ldr	r2, [pc, #252]	; (8000294 <getKeyInput+0x114>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4413      	add	r3, r2
 800019a:	460a      	mov	r2, r1
 800019c:	701a      	strb	r2, [r3, #0]
		debounceBuffer2[i] = debounceBuffer3[i];
 800019e:	4a3e      	ldr	r2, [pc, #248]	; (8000298 <getKeyInput+0x118>)
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	4413      	add	r3, r2
 80001a4:	7819      	ldrb	r1, [r3, #0]
 80001a6:	4a3a      	ldr	r2, [pc, #232]	; (8000290 <getKeyInput+0x110>)
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	4413      	add	r3, r2
 80001ac:	460a      	mov	r2, r1
 80001ae:	701a      	strb	r2, [r3, #0]
		debounceBuffer3[i] = HAL_GPIO_ReadPin(ButtonPorts[i], ButtonPins[i]);
 80001b0:	4a3a      	ldr	r2, [pc, #232]	; (800029c <getKeyInput+0x11c>)
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b8:	4939      	ldr	r1, [pc, #228]	; (80002a0 <getKeyInput+0x120>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001c0:	4619      	mov	r1, r3
 80001c2:	4610      	mov	r0, r2
 80001c4:	f001 fab8 	bl	8001738 <HAL_GPIO_ReadPin>
 80001c8:	4603      	mov	r3, r0
 80001ca:	4619      	mov	r1, r3
 80001cc:	4a32      	ldr	r2, [pc, #200]	; (8000298 <getKeyInput+0x118>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	4413      	add	r3, r2
 80001d2:	460a      	mov	r2, r1
 80001d4:	701a      	strb	r2, [r3, #0]

		if((debounceBuffer1[i] == debounceBuffer2[i]) && (debounceBuffer2[i] == debounceBuffer3[i])){
 80001d6:	4a2f      	ldr	r2, [pc, #188]	; (8000294 <getKeyInput+0x114>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4413      	add	r3, r2
 80001dc:	781a      	ldrb	r2, [r3, #0]
 80001de:	492c      	ldr	r1, [pc, #176]	; (8000290 <getKeyInput+0x110>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	440b      	add	r3, r1
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	429a      	cmp	r2, r3
 80001e8:	d146      	bne.n	8000278 <getKeyInput+0xf8>
 80001ea:	4a29      	ldr	r2, [pc, #164]	; (8000290 <getKeyInput+0x110>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	4413      	add	r3, r2
 80001f0:	781a      	ldrb	r2, [r3, #0]
 80001f2:	4929      	ldr	r1, [pc, #164]	; (8000298 <getKeyInput+0x118>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	440b      	add	r3, r1
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d13c      	bne.n	8000278 <getKeyInput+0xf8>
			if(buttonBuffer[i] != debounceBuffer3[i]){
 80001fe:	4a29      	ldr	r2, [pc, #164]	; (80002a4 <getKeyInput+0x124>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4413      	add	r3, r2
 8000204:	781a      	ldrb	r2, [r3, #0]
 8000206:	4924      	ldr	r1, [pc, #144]	; (8000298 <getKeyInput+0x118>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	440b      	add	r3, r1
 800020c:	781b      	ldrb	r3, [r3, #0]
 800020e:	429a      	cmp	r2, r3
 8000210:	d019      	beq.n	8000246 <getKeyInput+0xc6>
				buttonBuffer[i] = debounceBuffer3[i];
 8000212:	4a21      	ldr	r2, [pc, #132]	; (8000298 <getKeyInput+0x118>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	4413      	add	r3, r2
 8000218:	7819      	ldrb	r1, [r3, #0]
 800021a:	4a22      	ldr	r2, [pc, #136]	; (80002a4 <getKeyInput+0x124>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4413      	add	r3, r2
 8000220:	460a      	mov	r2, r1
 8000222:	701a      	strb	r2, [r3, #0]
				if(buttonBuffer[i] == PRESSED_STATE){
 8000224:	4a1f      	ldr	r2, [pc, #124]	; (80002a4 <getKeyInput+0x124>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4413      	add	r3, r2
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d123      	bne.n	8000278 <getKeyInput+0xf8>
					button_flag[i] = 1;
 8000230:	4a1d      	ldr	r2, [pc, #116]	; (80002a8 <getKeyInput+0x128>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4413      	add	r3, r2
 8000236:	2201      	movs	r2, #1
 8000238:	701a      	strb	r2, [r3, #0]
					counterAutoIncresing[i] = 0;
 800023a:	4a1c      	ldr	r2, [pc, #112]	; (80002ac <getKeyInput+0x12c>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	2100      	movs	r1, #0
 8000240:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000244:	e018      	b.n	8000278 <getKeyInput+0xf8>
				}
			} else {
				counterAutoIncresing[i]++;
 8000246:	4a19      	ldr	r2, [pc, #100]	; (80002ac <getKeyInput+0x12c>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800024e:	1c5a      	adds	r2, r3, #1
 8000250:	4916      	ldr	r1, [pc, #88]	; (80002ac <getKeyInput+0x12c>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counterAutoIncresing[i] >= DURATION_FOR_AUTO_INCREASING){
 8000258:	4a14      	ldr	r2, [pc, #80]	; (80002ac <getKeyInput+0x12c>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000260:	2b18      	cmp	r3, #24
 8000262:	dd09      	ble.n	8000278 <getKeyInput+0xf8>
					buttonBuffer[i] = RELEASED_STATE;
 8000264:	4a0f      	ldr	r2, [pc, #60]	; (80002a4 <getKeyInput+0x124>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	4413      	add	r3, r2
 800026a:	2201      	movs	r2, #1
 800026c:	701a      	strb	r2, [r3, #0]
					counterAutoIncresing[i] = 0;
 800026e:	4a0f      	ldr	r2, [pc, #60]	; (80002ac <getKeyInput+0x12c>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2100      	movs	r1, #0
 8000274:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	3301      	adds	r3, #1
 800027c:	607b      	str	r3, [r7, #4]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b02      	cmp	r3, #2
 8000282:	dd83      	ble.n	800018c <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000284:	bf00      	nop
 8000286:	bf00      	nop
 8000288:	3708      	adds	r7, #8
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	20000074 	.word	0x20000074
 8000294:	20000070 	.word	0x20000070
 8000298:	20000078 	.word	0x20000078
 800029c:	20000000 	.word	0x20000000
 80002a0:	2000000c 	.word	0x2000000c
 80002a4:	2000006c 	.word	0x2000006c
 80002a8:	2000007c 	.word	0x2000007c
 80002ac:	20000080 	.word	0x20000080

080002b0 <fsm_automatic>:
#include "fsm_automatic.h"
#include "global.h"
#include "main.h"
#include "led7_segment.h"

void fsm_automatic(){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	switch(status){
 80002b4:	4bb9      	ldr	r3, [pc, #740]	; (800059c <fsm_automatic+0x2ec>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	3b01      	subs	r3, #1
 80002ba:	2b04      	cmp	r3, #4
 80002bc:	f200 8182 	bhi.w	80005c4 <fsm_automatic+0x314>
 80002c0:	a201      	add	r2, pc, #4	; (adr r2, 80002c8 <fsm_automatic+0x18>)
 80002c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002c6:	bf00      	nop
 80002c8:	080002dd 	.word	0x080002dd
 80002cc:	08000327 	.word	0x08000327
 80002d0:	080003b5 	.word	0x080003b5
 80002d4:	08000463 	.word	0x08000463
 80002d8:	080004f1 	.word	0x080004f1
	case INIT:
		clearAllLeds();
 80002dc:	f000 ff10 	bl	8001100 <clearAllLeds>

		status = RED_GREEN;
 80002e0:	4bae      	ldr	r3, [pc, #696]	; (800059c <fsm_automatic+0x2ec>)
 80002e2:	2202      	movs	r2, #2
 80002e4:	601a      	str	r2, [r3, #0]
		setTimer(1, redTime);
 80002e6:	4bae      	ldr	r3, [pc, #696]	; (80005a0 <fsm_automatic+0x2f0>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4619      	mov	r1, r3
 80002ec:	2001      	movs	r0, #1
 80002ee:	f000 fd5b 	bl	8000da8 <setTimer>
		setTimer(2, greenTime);
 80002f2:	4bac      	ldr	r3, [pc, #688]	; (80005a4 <fsm_automatic+0x2f4>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4619      	mov	r1, r3
 80002f8:	2002      	movs	r0, #2
 80002fa:	f000 fd55 	bl	8000da8 <setTimer>
		setTimer(3, 10);
 80002fe:	210a      	movs	r1, #10
 8000300:	2003      	movs	r0, #3
 8000302:	f000 fd51 	bl	8000da8 <setTimer>
		setTimer(4, 10);
 8000306:	210a      	movs	r1, #10
 8000308:	2004      	movs	r0, #4
 800030a:	f000 fd4d 	bl	8000da8 <setTimer>
		timeCounter1 = redCount;
 800030e:	4ba6      	ldr	r3, [pc, #664]	; (80005a8 <fsm_automatic+0x2f8>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4aa6      	ldr	r2, [pc, #664]	; (80005ac <fsm_automatic+0x2fc>)
 8000314:	6013      	str	r3, [r2, #0]
		timeCounter2 = greenCount;
 8000316:	4ba6      	ldr	r3, [pc, #664]	; (80005b0 <fsm_automatic+0x300>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4aa6      	ldr	r2, [pc, #664]	; (80005b4 <fsm_automatic+0x304>)
 800031c:	6013      	str	r3, [r2, #0]
		index_led = 0;
 800031e:	4ba6      	ldr	r3, [pc, #664]	; (80005b8 <fsm_automatic+0x308>)
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
		break;
 8000324:	e157      	b.n	80005d6 <fsm_automatic+0x326>
	case RED_GREEN:
		setRed1();
 8000326:	f000 fe37 	bl	8000f98 <setRed1>
		setGreen2();
 800032a:	f000 fe8f 	bl	800104c <setGreen2>
		led7_segment();
 800032e:	f000 fc05 	bl	8000b3c <led7_segment>

		if(isButtonPressed(0) == 1){
 8000332:	2000      	movs	r0, #0
 8000334:	f7ff ff0a 	bl	800014c <isButtonPressed>
 8000338:	4603      	mov	r3, r0
 800033a:	2b01      	cmp	r3, #1
 800033c:	d102      	bne.n	8000344 <fsm_automatic+0x94>
			status = NORMAL;
 800033e:	4b97      	ldr	r3, [pc, #604]	; (800059c <fsm_automatic+0x2ec>)
 8000340:	220a      	movs	r2, #10
 8000342:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(1)); // do nothing
 8000344:	2001      	movs	r0, #1
 8000346:	f7ff ff01 	bl	800014c <isButtonPressed>
		if(isButtonPressed(2)); // do nothing
 800034a:	2002      	movs	r0, #2
 800034c:	f7ff fefe 	bl	800014c <isButtonPressed>

		// check timer expired to do something
		if(isTimerExpired(2) == 1){
 8000350:	2002      	movs	r0, #2
 8000352:	f000 fd49 	bl	8000de8 <isTimerExpired>
 8000356:	4603      	mov	r3, r0
 8000358:	2b01      	cmp	r3, #1
 800035a:	d10c      	bne.n	8000376 <fsm_automatic+0xc6>
			status = RED_YELLOW;
 800035c:	4b8f      	ldr	r3, [pc, #572]	; (800059c <fsm_automatic+0x2ec>)
 800035e:	2203      	movs	r2, #3
 8000360:	601a      	str	r2, [r3, #0]
			setTimer(2, yellowTime);
 8000362:	4b96      	ldr	r3, [pc, #600]	; (80005bc <fsm_automatic+0x30c>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4619      	mov	r1, r3
 8000368:	2002      	movs	r0, #2
 800036a:	f000 fd1d 	bl	8000da8 <setTimer>
			timeCounter2 = yellowCount;
 800036e:	4b94      	ldr	r3, [pc, #592]	; (80005c0 <fsm_automatic+0x310>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a90      	ldr	r2, [pc, #576]	; (80005b4 <fsm_automatic+0x304>)
 8000374:	6013      	str	r3, [r2, #0]
		}
		if(isTimerExpired(3) == 1){
 8000376:	2003      	movs	r0, #3
 8000378:	f000 fd36 	bl	8000de8 <isTimerExpired>
 800037c:	4603      	mov	r3, r0
 800037e:	2b01      	cmp	r3, #1
 8000380:	f040 8122 	bne.w	80005c8 <fsm_automatic+0x318>
			setTimer(3, 1000);
 8000384:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000388:	2003      	movs	r0, #3
 800038a:	f000 fd0d 	bl	8000da8 <setTimer>
			timeCounter1--;
 800038e:	4b87      	ldr	r3, [pc, #540]	; (80005ac <fsm_automatic+0x2fc>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	3b01      	subs	r3, #1
 8000394:	4a85      	ldr	r2, [pc, #532]	; (80005ac <fsm_automatic+0x2fc>)
 8000396:	6013      	str	r3, [r2, #0]
			timeCounter2--;
 8000398:	4b86      	ldr	r3, [pc, #536]	; (80005b4 <fsm_automatic+0x304>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	3b01      	subs	r3, #1
 800039e:	4a85      	ldr	r2, [pc, #532]	; (80005b4 <fsm_automatic+0x304>)
 80003a0:	6013      	str	r3, [r2, #0]
			updateClockBuffer(timeCounter1, timeCounter2);
 80003a2:	4b82      	ldr	r3, [pc, #520]	; (80005ac <fsm_automatic+0x2fc>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4a83      	ldr	r2, [pc, #524]	; (80005b4 <fsm_automatic+0x304>)
 80003a8:	6812      	ldr	r2, [r2, #0]
 80003aa:	4611      	mov	r1, r2
 80003ac:	4618      	mov	r0, r3
 80003ae:	f000 fab9 	bl	8000924 <updateClockBuffer>
		}
		break;
 80003b2:	e109      	b.n	80005c8 <fsm_automatic+0x318>
	case RED_YELLOW:
		setRed1();
 80003b4:	f000 fdf0 	bl	8000f98 <setRed1>
		setYellow2();
 80003b8:	f000 fe36 	bl	8001028 <setYellow2>
		led7_segment();
 80003bc:	f000 fbbe 	bl	8000b3c <led7_segment>

		if(isButtonPressed(0) == 1){
 80003c0:	2000      	movs	r0, #0
 80003c2:	f7ff fec3 	bl	800014c <isButtonPressed>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d102      	bne.n	80003d2 <fsm_automatic+0x122>
			status = NORMAL;
 80003cc:	4b73      	ldr	r3, [pc, #460]	; (800059c <fsm_automatic+0x2ec>)
 80003ce:	220a      	movs	r2, #10
 80003d0:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(1)); // do nothing
 80003d2:	2001      	movs	r0, #1
 80003d4:	f7ff feba 	bl	800014c <isButtonPressed>
		if(isButtonPressed(2)); // do nothing
 80003d8:	2002      	movs	r0, #2
 80003da:	f7ff feb7 	bl	800014c <isButtonPressed>

		// check timer expired to do something
		if(isTimerExpired(1) == 1 && isTimerExpired(2) == 1){
 80003de:	2001      	movs	r0, #1
 80003e0:	f000 fd02 	bl	8000de8 <isTimerExpired>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d11c      	bne.n	8000424 <fsm_automatic+0x174>
 80003ea:	2002      	movs	r0, #2
 80003ec:	f000 fcfc 	bl	8000de8 <isTimerExpired>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d116      	bne.n	8000424 <fsm_automatic+0x174>
			status = GREEN_RED;
 80003f6:	4b69      	ldr	r3, [pc, #420]	; (800059c <fsm_automatic+0x2ec>)
 80003f8:	2204      	movs	r2, #4
 80003fa:	601a      	str	r2, [r3, #0]
			setTimer(1, greenTime);
 80003fc:	4b69      	ldr	r3, [pc, #420]	; (80005a4 <fsm_automatic+0x2f4>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4619      	mov	r1, r3
 8000402:	2001      	movs	r0, #1
 8000404:	f000 fcd0 	bl	8000da8 <setTimer>
			setTimer(2, redTime);
 8000408:	4b65      	ldr	r3, [pc, #404]	; (80005a0 <fsm_automatic+0x2f0>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4619      	mov	r1, r3
 800040e:	2002      	movs	r0, #2
 8000410:	f000 fcca 	bl	8000da8 <setTimer>
			timeCounter1 = greenCount;
 8000414:	4b66      	ldr	r3, [pc, #408]	; (80005b0 <fsm_automatic+0x300>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a64      	ldr	r2, [pc, #400]	; (80005ac <fsm_automatic+0x2fc>)
 800041a:	6013      	str	r3, [r2, #0]
			timeCounter2 = redCount;
 800041c:	4b62      	ldr	r3, [pc, #392]	; (80005a8 <fsm_automatic+0x2f8>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a64      	ldr	r2, [pc, #400]	; (80005b4 <fsm_automatic+0x304>)
 8000422:	6013      	str	r3, [r2, #0]
		}
		if(isTimerExpired(3) == 1){
 8000424:	2003      	movs	r0, #3
 8000426:	f000 fcdf 	bl	8000de8 <isTimerExpired>
 800042a:	4603      	mov	r3, r0
 800042c:	2b01      	cmp	r3, #1
 800042e:	f040 80cd 	bne.w	80005cc <fsm_automatic+0x31c>
			setTimer(3, 1000);
 8000432:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000436:	2003      	movs	r0, #3
 8000438:	f000 fcb6 	bl	8000da8 <setTimer>
			timeCounter1--;
 800043c:	4b5b      	ldr	r3, [pc, #364]	; (80005ac <fsm_automatic+0x2fc>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	3b01      	subs	r3, #1
 8000442:	4a5a      	ldr	r2, [pc, #360]	; (80005ac <fsm_automatic+0x2fc>)
 8000444:	6013      	str	r3, [r2, #0]
			timeCounter2--;
 8000446:	4b5b      	ldr	r3, [pc, #364]	; (80005b4 <fsm_automatic+0x304>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	3b01      	subs	r3, #1
 800044c:	4a59      	ldr	r2, [pc, #356]	; (80005b4 <fsm_automatic+0x304>)
 800044e:	6013      	str	r3, [r2, #0]
			updateClockBuffer(timeCounter1, timeCounter2);
 8000450:	4b56      	ldr	r3, [pc, #344]	; (80005ac <fsm_automatic+0x2fc>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a57      	ldr	r2, [pc, #348]	; (80005b4 <fsm_automatic+0x304>)
 8000456:	6812      	ldr	r2, [r2, #0]
 8000458:	4611      	mov	r1, r2
 800045a:	4618      	mov	r0, r3
 800045c:	f000 fa62 	bl	8000924 <updateClockBuffer>
		}
		break;
 8000460:	e0b4      	b.n	80005cc <fsm_automatic+0x31c>
	case GREEN_RED:
		setGreen1();
 8000462:	f000 fdbd 	bl	8000fe0 <setGreen1>
		setRed2();
 8000466:	f000 fdcd 	bl	8001004 <setRed2>
		led7_segment();
 800046a:	f000 fb67 	bl	8000b3c <led7_segment>

		// check if any button is pressed
		if(isButtonPressed(0) == 1){
 800046e:	2000      	movs	r0, #0
 8000470:	f7ff fe6c 	bl	800014c <isButtonPressed>
 8000474:	4603      	mov	r3, r0
 8000476:	2b01      	cmp	r3, #1
 8000478:	d102      	bne.n	8000480 <fsm_automatic+0x1d0>
			status = NORMAL;
 800047a:	4b48      	ldr	r3, [pc, #288]	; (800059c <fsm_automatic+0x2ec>)
 800047c:	220a      	movs	r2, #10
 800047e:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(1)); // do nothing
 8000480:	2001      	movs	r0, #1
 8000482:	f7ff fe63 	bl	800014c <isButtonPressed>
		if(isButtonPressed(2)); // do nothing
 8000486:	2002      	movs	r0, #2
 8000488:	f7ff fe60 	bl	800014c <isButtonPressed>

		// check timer expired to do something
		if(isTimerExpired(1) == 1){
 800048c:	2001      	movs	r0, #1
 800048e:	f000 fcab 	bl	8000de8 <isTimerExpired>
 8000492:	4603      	mov	r3, r0
 8000494:	2b01      	cmp	r3, #1
 8000496:	d10c      	bne.n	80004b2 <fsm_automatic+0x202>
			status = YELLOW_RED;
 8000498:	4b40      	ldr	r3, [pc, #256]	; (800059c <fsm_automatic+0x2ec>)
 800049a:	2205      	movs	r2, #5
 800049c:	601a      	str	r2, [r3, #0]
			setTimer(1, yellowTime);
 800049e:	4b47      	ldr	r3, [pc, #284]	; (80005bc <fsm_automatic+0x30c>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4619      	mov	r1, r3
 80004a4:	2001      	movs	r0, #1
 80004a6:	f000 fc7f 	bl	8000da8 <setTimer>
			timeCounter1 = yellowCount;
 80004aa:	4b45      	ldr	r3, [pc, #276]	; (80005c0 <fsm_automatic+0x310>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a3f      	ldr	r2, [pc, #252]	; (80005ac <fsm_automatic+0x2fc>)
 80004b0:	6013      	str	r3, [r2, #0]
		}
		if(isTimerExpired(3) == 1){
 80004b2:	2003      	movs	r0, #3
 80004b4:	f000 fc98 	bl	8000de8 <isTimerExpired>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	f040 8088 	bne.w	80005d0 <fsm_automatic+0x320>
			setTimer(3, 1000);
 80004c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004c4:	2003      	movs	r0, #3
 80004c6:	f000 fc6f 	bl	8000da8 <setTimer>
			timeCounter1--;
 80004ca:	4b38      	ldr	r3, [pc, #224]	; (80005ac <fsm_automatic+0x2fc>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	3b01      	subs	r3, #1
 80004d0:	4a36      	ldr	r2, [pc, #216]	; (80005ac <fsm_automatic+0x2fc>)
 80004d2:	6013      	str	r3, [r2, #0]
			timeCounter2--;
 80004d4:	4b37      	ldr	r3, [pc, #220]	; (80005b4 <fsm_automatic+0x304>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	3b01      	subs	r3, #1
 80004da:	4a36      	ldr	r2, [pc, #216]	; (80005b4 <fsm_automatic+0x304>)
 80004dc:	6013      	str	r3, [r2, #0]
			updateClockBuffer(timeCounter1, timeCounter2);
 80004de:	4b33      	ldr	r3, [pc, #204]	; (80005ac <fsm_automatic+0x2fc>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a34      	ldr	r2, [pc, #208]	; (80005b4 <fsm_automatic+0x304>)
 80004e4:	6812      	ldr	r2, [r2, #0]
 80004e6:	4611      	mov	r1, r2
 80004e8:	4618      	mov	r0, r3
 80004ea:	f000 fa1b 	bl	8000924 <updateClockBuffer>
		}
		break;
 80004ee:	e06f      	b.n	80005d0 <fsm_automatic+0x320>
	case YELLOW_RED:
		setYellow1();
 80004f0:	f000 fd64 	bl	8000fbc <setYellow1>
		setRed2();
 80004f4:	f000 fd86 	bl	8001004 <setRed2>
		led7_segment();
 80004f8:	f000 fb20 	bl	8000b3c <led7_segment>

		// check if any button is pressed
		if(isButtonPressed(0) == 1){
 80004fc:	2000      	movs	r0, #0
 80004fe:	f7ff fe25 	bl	800014c <isButtonPressed>
 8000502:	4603      	mov	r3, r0
 8000504:	2b01      	cmp	r3, #1
 8000506:	d102      	bne.n	800050e <fsm_automatic+0x25e>
			status = NORMAL;
 8000508:	4b24      	ldr	r3, [pc, #144]	; (800059c <fsm_automatic+0x2ec>)
 800050a:	220a      	movs	r2, #10
 800050c:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(1)); // do nothing
 800050e:	2001      	movs	r0, #1
 8000510:	f7ff fe1c 	bl	800014c <isButtonPressed>
		if(isButtonPressed(2)); // do nothing
 8000514:	2002      	movs	r0, #2
 8000516:	f7ff fe19 	bl	800014c <isButtonPressed>

		// check timer expired to do something
		if(isTimerExpired(1) == 1 && isTimerExpired(2) == 1){
 800051a:	2001      	movs	r0, #1
 800051c:	f000 fc64 	bl	8000de8 <isTimerExpired>
 8000520:	4603      	mov	r3, r0
 8000522:	2b01      	cmp	r3, #1
 8000524:	d11c      	bne.n	8000560 <fsm_automatic+0x2b0>
 8000526:	2002      	movs	r0, #2
 8000528:	f000 fc5e 	bl	8000de8 <isTimerExpired>
 800052c:	4603      	mov	r3, r0
 800052e:	2b01      	cmp	r3, #1
 8000530:	d116      	bne.n	8000560 <fsm_automatic+0x2b0>
			status = RED_GREEN;
 8000532:	4b1a      	ldr	r3, [pc, #104]	; (800059c <fsm_automatic+0x2ec>)
 8000534:	2202      	movs	r2, #2
 8000536:	601a      	str	r2, [r3, #0]
			setTimer(1, redTime);
 8000538:	4b19      	ldr	r3, [pc, #100]	; (80005a0 <fsm_automatic+0x2f0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4619      	mov	r1, r3
 800053e:	2001      	movs	r0, #1
 8000540:	f000 fc32 	bl	8000da8 <setTimer>
			setTimer(2, greenTime);
 8000544:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <fsm_automatic+0x2f4>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4619      	mov	r1, r3
 800054a:	2002      	movs	r0, #2
 800054c:	f000 fc2c 	bl	8000da8 <setTimer>
			timeCounter1 = redCount;
 8000550:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <fsm_automatic+0x2f8>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a15      	ldr	r2, [pc, #84]	; (80005ac <fsm_automatic+0x2fc>)
 8000556:	6013      	str	r3, [r2, #0]
			timeCounter2 = greenCount;
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <fsm_automatic+0x300>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a15      	ldr	r2, [pc, #84]	; (80005b4 <fsm_automatic+0x304>)
 800055e:	6013      	str	r3, [r2, #0]
		}
		if(isTimerExpired(3) == 1){
 8000560:	2003      	movs	r0, #3
 8000562:	f000 fc41 	bl	8000de8 <isTimerExpired>
 8000566:	4603      	mov	r3, r0
 8000568:	2b01      	cmp	r3, #1
 800056a:	d133      	bne.n	80005d4 <fsm_automatic+0x324>
			setTimer(3, 1000);
 800056c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000570:	2003      	movs	r0, #3
 8000572:	f000 fc19 	bl	8000da8 <setTimer>
			timeCounter1--;
 8000576:	4b0d      	ldr	r3, [pc, #52]	; (80005ac <fsm_automatic+0x2fc>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	3b01      	subs	r3, #1
 800057c:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <fsm_automatic+0x2fc>)
 800057e:	6013      	str	r3, [r2, #0]
			timeCounter2--;
 8000580:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <fsm_automatic+0x304>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	3b01      	subs	r3, #1
 8000586:	4a0b      	ldr	r2, [pc, #44]	; (80005b4 <fsm_automatic+0x304>)
 8000588:	6013      	str	r3, [r2, #0]
			updateClockBuffer(timeCounter1, timeCounter2);
 800058a:	4b08      	ldr	r3, [pc, #32]	; (80005ac <fsm_automatic+0x2fc>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <fsm_automatic+0x304>)
 8000590:	6812      	ldr	r2, [r2, #0]
 8000592:	4611      	mov	r1, r2
 8000594:	4618      	mov	r0, r3
 8000596:	f000 f9c5 	bl	8000924 <updateClockBuffer>
		}
		break;
 800059a:	e01b      	b.n	80005d4 <fsm_automatic+0x324>
 800059c:	2000008c 	.word	0x2000008c
 80005a0:	20000030 	.word	0x20000030
 80005a4:	20000038 	.word	0x20000038
 80005a8:	20000024 	.word	0x20000024
 80005ac:	2000003c 	.word	0x2000003c
 80005b0:	2000002c 	.word	0x2000002c
 80005b4:	20000040 	.word	0x20000040
 80005b8:	20000090 	.word	0x20000090
 80005bc:	20000034 	.word	0x20000034
 80005c0:	20000028 	.word	0x20000028
	default:
		break;
 80005c4:	bf00      	nop
 80005c6:	e006      	b.n	80005d6 <fsm_automatic+0x326>
		break;
 80005c8:	bf00      	nop
 80005ca:	e004      	b.n	80005d6 <fsm_automatic+0x326>
		break;
 80005cc:	bf00      	nop
 80005ce:	e002      	b.n	80005d6 <fsm_automatic+0x326>
		break;
 80005d0:	bf00      	nop
 80005d2:	e000      	b.n	80005d6 <fsm_automatic+0x326>
		break;
 80005d4:	bf00      	nop
	}
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop

080005dc <fsm_setting>:
int tmp_yellowCount = 1;
int tmp_greenCount = 1;

int ledBlinky = 500; // 500ms

void fsm_setting(){
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	switch(status){
 80005e0:	4baf      	ldr	r3, [pc, #700]	; (80008a0 <fsm_setting+0x2c4>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3b0a      	subs	r3, #10
 80005e6:	2b04      	cmp	r3, #4
 80005e8:	f200 814f 	bhi.w	800088a <fsm_setting+0x2ae>
 80005ec:	a201      	add	r2, pc, #4	; (adr r2, 80005f4 <fsm_setting+0x18>)
 80005ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f2:	bf00      	nop
 80005f4:	08000609 	.word	0x08000609
 80005f8:	08000675 	.word	0x08000675
 80005fc:	08000713 	.word	0x08000713
 8000600:	080007af 	.word	0x080007af
 8000604:	08000843 	.word	0x08000843
	case NORMAL:
		clearAllLeds();
 8000608:	f000 fd7a 	bl	8001100 <clearAllLeds>
		index_led = 0; // display from led 0 to 3
 800060c:	4ba5      	ldr	r3, [pc, #660]	; (80008a4 <fsm_setting+0x2c8>)
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
		setTimer(0, 10); // use for led blink
 8000612:	210a      	movs	r1, #10
 8000614:	2000      	movs	r0, #0
 8000616:	f000 fbc7 	bl	8000da8 <setTimer>
		setTimer(4, 10);
 800061a:	210a      	movs	r1, #10
 800061c:	2004      	movs	r0, #4
 800061e:	f000 fbc3 	bl	8000da8 <setTimer>

		if(isButtonPressed(0) == 1){
 8000622:	2000      	movs	r0, #0
 8000624:	f7ff fd92 	bl	800014c <isButtonPressed>
 8000628:	4603      	mov	r3, r0
 800062a:	2b01      	cmp	r3, #1
 800062c:	d106      	bne.n	800063c <fsm_setting+0x60>
			status = SET_RED;
 800062e:	4b9c      	ldr	r3, [pc, #624]	; (80008a0 <fsm_setting+0x2c4>)
 8000630:	220b      	movs	r2, #11
 8000632:	601a      	str	r2, [r3, #0]
			setRed1();
 8000634:	f000 fcb0 	bl	8000f98 <setRed1>
			setRed2();
 8000638:	f000 fce4 	bl	8001004 <setRed2>
		}
		if(isButtonPressed(1)); //do nothing
 800063c:	2001      	movs	r0, #1
 800063e:	f7ff fd85 	bl	800014c <isButtonPressed>
		if(isButtonPressed(2) == 1){
 8000642:	2002      	movs	r0, #2
 8000644:	f7ff fd82 	bl	800014c <isButtonPressed>
 8000648:	4603      	mov	r3, r0
 800064a:	2b01      	cmp	r3, #1
 800064c:	f040 811f 	bne.w	800088e <fsm_setting+0x2b2>
			redCount = redCountInit;
 8000650:	4b95      	ldr	r3, [pc, #596]	; (80008a8 <fsm_setting+0x2cc>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a95      	ldr	r2, [pc, #596]	; (80008ac <fsm_setting+0x2d0>)
 8000656:	6013      	str	r3, [r2, #0]
			yellowCount = yellowCountInit;
 8000658:	4b95      	ldr	r3, [pc, #596]	; (80008b0 <fsm_setting+0x2d4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a95      	ldr	r2, [pc, #596]	; (80008b4 <fsm_setting+0x2d8>)
 800065e:	6013      	str	r3, [r2, #0]
			greenCount = greenCountInit;
 8000660:	4b95      	ldr	r3, [pc, #596]	; (80008b8 <fsm_setting+0x2dc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a95      	ldr	r2, [pc, #596]	; (80008bc <fsm_setting+0x2e0>)
 8000666:	6013      	str	r3, [r2, #0]
			changeCountToSecond();
 8000668:	f000 f932 	bl	80008d0 <changeCountToSecond>

			status = INIT;
 800066c:	4b8c      	ldr	r3, [pc, #560]	; (80008a0 <fsm_setting+0x2c4>)
 800066e:	2201      	movs	r2, #1
 8000670:	601a      	str	r2, [r3, #0]
		}
		break;
 8000672:	e10c      	b.n	800088e <fsm_setting+0x2b2>
	case SET_RED:
		updateClockBuffer(1, tmp_redCount);
 8000674:	4b92      	ldr	r3, [pc, #584]	; (80008c0 <fsm_setting+0x2e4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4619      	mov	r1, r3
 800067a:	2001      	movs	r0, #1
 800067c:	f000 f952 	bl	8000924 <updateClockBuffer>
		led7_segment();
 8000680:	f000 fa5c 	bl	8000b3c <led7_segment>

		if(isTimerExpired(0) == 1){
 8000684:	2000      	movs	r0, #0
 8000686:	f000 fbaf 	bl	8000de8 <isTimerExpired>
 800068a:	4603      	mov	r3, r0
 800068c:	2b01      	cmp	r3, #1
 800068e:	d109      	bne.n	80006a4 <fsm_setting+0xc8>
			setTimer(0, ledBlinky);
 8000690:	4b8c      	ldr	r3, [pc, #560]	; (80008c4 <fsm_setting+0x2e8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4619      	mov	r1, r3
 8000696:	2000      	movs	r0, #0
 8000698:	f000 fb86 	bl	8000da8 <setTimer>
			toggleRed1();
 800069c:	f000 fce8 	bl	8001070 <toggleRed1>
			toggleRed2();
 80006a0:	f000 fd0a 	bl	80010b8 <toggleRed2>
		}

		if(isButtonPressed(0) == 1){
 80006a4:	2000      	movs	r0, #0
 80006a6:	f7ff fd51 	bl	800014c <isButtonPressed>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d106      	bne.n	80006be <fsm_setting+0xe2>
			status = SET_YELLOW;
 80006b0:	4b7b      	ldr	r3, [pc, #492]	; (80008a0 <fsm_setting+0x2c4>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	601a      	str	r2, [r3, #0]
			setYellow1();
 80006b6:	f000 fc81 	bl	8000fbc <setYellow1>
			setYellow2();
 80006ba:	f000 fcb5 	bl	8001028 <setYellow2>
		}
		if(isButtonPressed(1) == 1){
 80006be:	2001      	movs	r0, #1
 80006c0:	f7ff fd44 	bl	800014c <isButtonPressed>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d118      	bne.n	80006fc <fsm_setting+0x120>
			tmp_redCount++;
 80006ca:	4b7d      	ldr	r3, [pc, #500]	; (80008c0 <fsm_setting+0x2e4>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	3301      	adds	r3, #1
 80006d0:	4a7b      	ldr	r2, [pc, #492]	; (80008c0 <fsm_setting+0x2e4>)
 80006d2:	6013      	str	r3, [r2, #0]
			while (tmp_redCount < 1) tmp_redCount += 99;
 80006d4:	e004      	b.n	80006e0 <fsm_setting+0x104>
 80006d6:	4b7a      	ldr	r3, [pc, #488]	; (80008c0 <fsm_setting+0x2e4>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3363      	adds	r3, #99	; 0x63
 80006dc:	4a78      	ldr	r2, [pc, #480]	; (80008c0 <fsm_setting+0x2e4>)
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b77      	ldr	r3, [pc, #476]	; (80008c0 <fsm_setting+0x2e4>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	ddf6      	ble.n	80006d6 <fsm_setting+0xfa>
			while (tmp_redCount > 99) tmp_redCount -= 99;
 80006e8:	e004      	b.n	80006f4 <fsm_setting+0x118>
 80006ea:	4b75      	ldr	r3, [pc, #468]	; (80008c0 <fsm_setting+0x2e4>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	3b63      	subs	r3, #99	; 0x63
 80006f0:	4a73      	ldr	r2, [pc, #460]	; (80008c0 <fsm_setting+0x2e4>)
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b72      	ldr	r3, [pc, #456]	; (80008c0 <fsm_setting+0x2e4>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b63      	cmp	r3, #99	; 0x63
 80006fa:	dcf6      	bgt.n	80006ea <fsm_setting+0x10e>
		}
		if(isButtonPressed(2) == 1){
 80006fc:	2002      	movs	r0, #2
 80006fe:	f7ff fd25 	bl	800014c <isButtonPressed>
 8000702:	4603      	mov	r3, r0
 8000704:	2b01      	cmp	r3, #1
 8000706:	f040 80c4 	bne.w	8000892 <fsm_setting+0x2b6>
			status = CHECK_VALID;
 800070a:	4b65      	ldr	r3, [pc, #404]	; (80008a0 <fsm_setting+0x2c4>)
 800070c:	220e      	movs	r2, #14
 800070e:	601a      	str	r2, [r3, #0]
		}

		break;
 8000710:	e0bf      	b.n	8000892 <fsm_setting+0x2b6>
	case SET_YELLOW:
		updateClockBuffer(2, tmp_yellowCount);
 8000712:	4b6d      	ldr	r3, [pc, #436]	; (80008c8 <fsm_setting+0x2ec>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4619      	mov	r1, r3
 8000718:	2002      	movs	r0, #2
 800071a:	f000 f903 	bl	8000924 <updateClockBuffer>
		led7_segment();
 800071e:	f000 fa0d 	bl	8000b3c <led7_segment>

		if(isTimerExpired(0) == 1){
 8000722:	2000      	movs	r0, #0
 8000724:	f000 fb60 	bl	8000de8 <isTimerExpired>
 8000728:	4603      	mov	r3, r0
 800072a:	2b01      	cmp	r3, #1
 800072c:	d109      	bne.n	8000742 <fsm_setting+0x166>
			setTimer(0, ledBlinky);
 800072e:	4b65      	ldr	r3, [pc, #404]	; (80008c4 <fsm_setting+0x2e8>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4619      	mov	r1, r3
 8000734:	2000      	movs	r0, #0
 8000736:	f000 fb37 	bl	8000da8 <setTimer>
			toggleYellow1();
 800073a:	f000 fca5 	bl	8001088 <toggleYellow1>
			toggleYellow2();
 800073e:	f000 fcc7 	bl	80010d0 <toggleYellow2>
		}

		if(isButtonPressed(0) == 1){
 8000742:	2000      	movs	r0, #0
 8000744:	f7ff fd02 	bl	800014c <isButtonPressed>
 8000748:	4603      	mov	r3, r0
 800074a:	2b01      	cmp	r3, #1
 800074c:	d106      	bne.n	800075c <fsm_setting+0x180>
			status = SET_GREEN;
 800074e:	4b54      	ldr	r3, [pc, #336]	; (80008a0 <fsm_setting+0x2c4>)
 8000750:	220d      	movs	r2, #13
 8000752:	601a      	str	r2, [r3, #0]
			setGreen1();
 8000754:	f000 fc44 	bl	8000fe0 <setGreen1>
			setGreen2();
 8000758:	f000 fc78 	bl	800104c <setGreen2>
		}
		if(isButtonPressed(1) == 1){
 800075c:	2001      	movs	r0, #1
 800075e:	f7ff fcf5 	bl	800014c <isButtonPressed>
 8000762:	4603      	mov	r3, r0
 8000764:	2b01      	cmp	r3, #1
 8000766:	d118      	bne.n	800079a <fsm_setting+0x1be>
			tmp_yellowCount++;
 8000768:	4b57      	ldr	r3, [pc, #348]	; (80008c8 <fsm_setting+0x2ec>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	3301      	adds	r3, #1
 800076e:	4a56      	ldr	r2, [pc, #344]	; (80008c8 <fsm_setting+0x2ec>)
 8000770:	6013      	str	r3, [r2, #0]
			while (tmp_yellowCount < 1) tmp_yellowCount += 99;
 8000772:	e004      	b.n	800077e <fsm_setting+0x1a2>
 8000774:	4b54      	ldr	r3, [pc, #336]	; (80008c8 <fsm_setting+0x2ec>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	3363      	adds	r3, #99	; 0x63
 800077a:	4a53      	ldr	r2, [pc, #332]	; (80008c8 <fsm_setting+0x2ec>)
 800077c:	6013      	str	r3, [r2, #0]
 800077e:	4b52      	ldr	r3, [pc, #328]	; (80008c8 <fsm_setting+0x2ec>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	ddf6      	ble.n	8000774 <fsm_setting+0x198>
			while (tmp_yellowCount > 99) tmp_yellowCount -= 99;
 8000786:	e004      	b.n	8000792 <fsm_setting+0x1b6>
 8000788:	4b4f      	ldr	r3, [pc, #316]	; (80008c8 <fsm_setting+0x2ec>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	3b63      	subs	r3, #99	; 0x63
 800078e:	4a4e      	ldr	r2, [pc, #312]	; (80008c8 <fsm_setting+0x2ec>)
 8000790:	6013      	str	r3, [r2, #0]
 8000792:	4b4d      	ldr	r3, [pc, #308]	; (80008c8 <fsm_setting+0x2ec>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2b63      	cmp	r3, #99	; 0x63
 8000798:	dcf6      	bgt.n	8000788 <fsm_setting+0x1ac>
		}
		if(isButtonPressed(2) == 1){
 800079a:	2002      	movs	r0, #2
 800079c:	f7ff fcd6 	bl	800014c <isButtonPressed>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d177      	bne.n	8000896 <fsm_setting+0x2ba>
			status = CHECK_VALID;
 80007a6:	4b3e      	ldr	r3, [pc, #248]	; (80008a0 <fsm_setting+0x2c4>)
 80007a8:	220e      	movs	r2, #14
 80007aa:	601a      	str	r2, [r3, #0]
		}
		break;
 80007ac:	e073      	b.n	8000896 <fsm_setting+0x2ba>
	case SET_GREEN:
		updateClockBuffer(3, tmp_greenCount);
 80007ae:	4b47      	ldr	r3, [pc, #284]	; (80008cc <fsm_setting+0x2f0>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4619      	mov	r1, r3
 80007b4:	2003      	movs	r0, #3
 80007b6:	f000 f8b5 	bl	8000924 <updateClockBuffer>
		led7_segment();
 80007ba:	f000 f9bf 	bl	8000b3c <led7_segment>

		if(isTimerExpired(0) == 1){
 80007be:	2000      	movs	r0, #0
 80007c0:	f000 fb12 	bl	8000de8 <isTimerExpired>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d109      	bne.n	80007de <fsm_setting+0x202>
			setTimer(0, ledBlinky);
 80007ca:	4b3e      	ldr	r3, [pc, #248]	; (80008c4 <fsm_setting+0x2e8>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4619      	mov	r1, r3
 80007d0:	2000      	movs	r0, #0
 80007d2:	f000 fae9 	bl	8000da8 <setTimer>
			toggleGreen1();
 80007d6:	f000 fc63 	bl	80010a0 <toggleGreen1>
			toggleGreen2();
 80007da:	f000 fc85 	bl	80010e8 <toggleGreen2>
		}
		if(isButtonPressed(0) == 1){
 80007de:	2000      	movs	r0, #0
 80007e0:	f7ff fcb4 	bl	800014c <isButtonPressed>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d102      	bne.n	80007f0 <fsm_setting+0x214>
			status = NORMAL;
 80007ea:	4b2d      	ldr	r3, [pc, #180]	; (80008a0 <fsm_setting+0x2c4>)
 80007ec:	220a      	movs	r2, #10
 80007ee:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(1) == 1){
 80007f0:	2001      	movs	r0, #1
 80007f2:	f7ff fcab 	bl	800014c <isButtonPressed>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d118      	bne.n	800082e <fsm_setting+0x252>
			tmp_greenCount++;
 80007fc:	4b33      	ldr	r3, [pc, #204]	; (80008cc <fsm_setting+0x2f0>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	3301      	adds	r3, #1
 8000802:	4a32      	ldr	r2, [pc, #200]	; (80008cc <fsm_setting+0x2f0>)
 8000804:	6013      	str	r3, [r2, #0]
			while (tmp_greenCount < 1) tmp_greenCount += 99;
 8000806:	e004      	b.n	8000812 <fsm_setting+0x236>
 8000808:	4b30      	ldr	r3, [pc, #192]	; (80008cc <fsm_setting+0x2f0>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	3363      	adds	r3, #99	; 0x63
 800080e:	4a2f      	ldr	r2, [pc, #188]	; (80008cc <fsm_setting+0x2f0>)
 8000810:	6013      	str	r3, [r2, #0]
 8000812:	4b2e      	ldr	r3, [pc, #184]	; (80008cc <fsm_setting+0x2f0>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	ddf6      	ble.n	8000808 <fsm_setting+0x22c>
			while (tmp_greenCount > 99) tmp_greenCount -= 99;
 800081a:	e004      	b.n	8000826 <fsm_setting+0x24a>
 800081c:	4b2b      	ldr	r3, [pc, #172]	; (80008cc <fsm_setting+0x2f0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	3b63      	subs	r3, #99	; 0x63
 8000822:	4a2a      	ldr	r2, [pc, #168]	; (80008cc <fsm_setting+0x2f0>)
 8000824:	6013      	str	r3, [r2, #0]
 8000826:	4b29      	ldr	r3, [pc, #164]	; (80008cc <fsm_setting+0x2f0>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b63      	cmp	r3, #99	; 0x63
 800082c:	dcf6      	bgt.n	800081c <fsm_setting+0x240>
		}
		if(isButtonPressed(2) == 1){
 800082e:	2002      	movs	r0, #2
 8000830:	f7ff fc8c 	bl	800014c <isButtonPressed>
 8000834:	4603      	mov	r3, r0
 8000836:	2b01      	cmp	r3, #1
 8000838:	d12f      	bne.n	800089a <fsm_setting+0x2be>
			status = CHECK_VALID;
 800083a:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <fsm_setting+0x2c4>)
 800083c:	220e      	movs	r2, #14
 800083e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000840:	e02b      	b.n	800089a <fsm_setting+0x2be>
	case CHECK_VALID:
		if (tmp_redCount == tmp_yellowCount + tmp_greenCount){
 8000842:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <fsm_setting+0x2ec>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	4b21      	ldr	r3, [pc, #132]	; (80008cc <fsm_setting+0x2f0>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	441a      	add	r2, r3
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <fsm_setting+0x2e4>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	429a      	cmp	r2, r3
 8000852:	d10d      	bne.n	8000870 <fsm_setting+0x294>
			redCount = tmp_redCount;
 8000854:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <fsm_setting+0x2e4>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a14      	ldr	r2, [pc, #80]	; (80008ac <fsm_setting+0x2d0>)
 800085a:	6013      	str	r3, [r2, #0]
			yellowCount = tmp_yellowCount;
 800085c:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <fsm_setting+0x2ec>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a14      	ldr	r2, [pc, #80]	; (80008b4 <fsm_setting+0x2d8>)
 8000862:	6013      	str	r3, [r2, #0]
			greenCount = tmp_greenCount;
 8000864:	4b19      	ldr	r3, [pc, #100]	; (80008cc <fsm_setting+0x2f0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a14      	ldr	r2, [pc, #80]	; (80008bc <fsm_setting+0x2e0>)
 800086a:	6013      	str	r3, [r2, #0]
			changeCountToSecond();
 800086c:	f000 f830 	bl	80008d0 <changeCountToSecond>
		}
		tmp_redCount = 1;
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <fsm_setting+0x2e4>)
 8000872:	2201      	movs	r2, #1
 8000874:	601a      	str	r2, [r3, #0]
		tmp_yellowCount = 1;
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <fsm_setting+0x2ec>)
 8000878:	2201      	movs	r2, #1
 800087a:	601a      	str	r2, [r3, #0]
		tmp_greenCount = 1;
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <fsm_setting+0x2f0>)
 800087e:	2201      	movs	r2, #1
 8000880:	601a      	str	r2, [r3, #0]
		status = INIT;
 8000882:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <fsm_setting+0x2c4>)
 8000884:	2201      	movs	r2, #1
 8000886:	601a      	str	r2, [r3, #0]
		break;
 8000888:	e008      	b.n	800089c <fsm_setting+0x2c0>
	default:
		break;
 800088a:	bf00      	nop
 800088c:	e006      	b.n	800089c <fsm_setting+0x2c0>
		break;
 800088e:	bf00      	nop
 8000890:	e004      	b.n	800089c <fsm_setting+0x2c0>
		break;
 8000892:	bf00      	nop
 8000894:	e002      	b.n	800089c <fsm_setting+0x2c0>
		break;
 8000896:	bf00      	nop
 8000898:	e000      	b.n	800089c <fsm_setting+0x2c0>
		break;
 800089a:	bf00      	nop
	}
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	2000008c 	.word	0x2000008c
 80008a4:	20000090 	.word	0x20000090
 80008a8:	080027a8 	.word	0x080027a8
 80008ac:	20000024 	.word	0x20000024
 80008b0:	080027ac 	.word	0x080027ac
 80008b4:	20000028 	.word	0x20000028
 80008b8:	080027b0 	.word	0x080027b0
 80008bc:	2000002c 	.word	0x2000002c
 80008c0:	20000014 	.word	0x20000014
 80008c4:	20000020 	.word	0x20000020
 80008c8:	20000018 	.word	0x20000018
 80008cc:	2000001c 	.word	0x2000001c

080008d0 <changeCountToSecond>:
const int changeToSecond = 1000;
int redTime = 5000;
int yellowTime = 2000;
int greenTime = 3000;

void changeCountToSecond(){
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
	redTime = redCount * changeToSecond;
 80008d4:	4b0d      	ldr	r3, [pc, #52]	; (800090c <changeCountToSecond+0x3c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008dc:	fb02 f303 	mul.w	r3, r2, r3
 80008e0:	4a0b      	ldr	r2, [pc, #44]	; (8000910 <changeCountToSecond+0x40>)
 80008e2:	6013      	str	r3, [r2, #0]
	yellowTime = yellowCount * changeToSecond;
 80008e4:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <changeCountToSecond+0x44>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008ec:	fb02 f303 	mul.w	r3, r2, r3
 80008f0:	4a09      	ldr	r2, [pc, #36]	; (8000918 <changeCountToSecond+0x48>)
 80008f2:	6013      	str	r3, [r2, #0]
	greenTime = greenCount * changeToSecond;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <changeCountToSecond+0x4c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008fc:	fb02 f303 	mul.w	r3, r2, r3
 8000900:	4a07      	ldr	r2, [pc, #28]	; (8000920 <changeCountToSecond+0x50>)
 8000902:	6013      	str	r3, [r2, #0]
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	20000024 	.word	0x20000024
 8000910:	20000030 	.word	0x20000030
 8000914:	20000028 	.word	0x20000028
 8000918:	20000034 	.word	0x20000034
 800091c:	2000002c 	.word	0x2000002c
 8000920:	20000038 	.word	0x20000038

08000924 <updateClockBuffer>:

const int MAX_LED = 4;
int index_led = 0;
int led_buffer[4] = {0};

void updateClockBuffer(int value1, int value2){
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
	led_buffer[0] = value1 / 10;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a18      	ldr	r2, [pc, #96]	; (8000994 <updateClockBuffer+0x70>)
 8000932:	fb82 1203 	smull	r1, r2, r2, r3
 8000936:	1092      	asrs	r2, r2, #2
 8000938:	17db      	asrs	r3, r3, #31
 800093a:	1ad3      	subs	r3, r2, r3
 800093c:	4a16      	ldr	r2, [pc, #88]	; (8000998 <updateClockBuffer+0x74>)
 800093e:	6013      	str	r3, [r2, #0]
	led_buffer[1] = value1 % 10;
 8000940:	6879      	ldr	r1, [r7, #4]
 8000942:	4b14      	ldr	r3, [pc, #80]	; (8000994 <updateClockBuffer+0x70>)
 8000944:	fb83 2301 	smull	r2, r3, r3, r1
 8000948:	109a      	asrs	r2, r3, #2
 800094a:	17cb      	asrs	r3, r1, #31
 800094c:	1ad2      	subs	r2, r2, r3
 800094e:	4613      	mov	r3, r2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	4413      	add	r3, r2
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	1aca      	subs	r2, r1, r3
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <updateClockBuffer+0x74>)
 800095a:	605a      	str	r2, [r3, #4]
	led_buffer[2] = value2 / 10;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <updateClockBuffer+0x70>)
 8000960:	fb82 1203 	smull	r1, r2, r2, r3
 8000964:	1092      	asrs	r2, r2, #2
 8000966:	17db      	asrs	r3, r3, #31
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	4a0b      	ldr	r2, [pc, #44]	; (8000998 <updateClockBuffer+0x74>)
 800096c:	6093      	str	r3, [r2, #8]
	led_buffer[3] = value2 % 10;
 800096e:	6839      	ldr	r1, [r7, #0]
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <updateClockBuffer+0x70>)
 8000972:	fb83 2301 	smull	r2, r3, r3, r1
 8000976:	109a      	asrs	r2, r3, #2
 8000978:	17cb      	asrs	r3, r1, #31
 800097a:	1ad2      	subs	r2, r2, r3
 800097c:	4613      	mov	r3, r2
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	4413      	add	r3, r2
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	1aca      	subs	r2, r1, r3
 8000986:	4b04      	ldr	r3, [pc, #16]	; (8000998 <updateClockBuffer+0x74>)
 8000988:	60da      	str	r2, [r3, #12]
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	66666667 	.word	0x66666667
 8000998:	20000094 	.word	0x20000094

0800099c <update7SEG>:

void update7SEG(int index_led){
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b03      	cmp	r3, #3
 80009a8:	d852      	bhi.n	8000a50 <update7SEG+0xb4>
 80009aa:	a201      	add	r2, pc, #4	; (adr r2, 80009b0 <update7SEG+0x14>)
 80009ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b0:	080009c1 	.word	0x080009c1
 80009b4:	080009e5 	.word	0x080009e5
 80009b8:	08000a09 	.word	0x08000a09
 80009bc:	08000a2d 	.word	0x08000a2d
	switch(index_led){
	case 0:
		HAL_GPIO_WritePin(GPIOA, EN0_Pin, RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c6:	4825      	ldr	r0, [pc, #148]	; (8000a5c <update7SEG+0xc0>)
 80009c8:	f000 fecd 	bl	8001766 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN1_Pin|EN2_Pin|EN3_Pin, SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80009d2:	4822      	ldr	r0, [pc, #136]	; (8000a5c <update7SEG+0xc0>)
 80009d4:	f000 fec7 	bl	8001766 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 80009d8:	4b21      	ldr	r3, [pc, #132]	; (8000a60 <update7SEG+0xc4>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 f841 	bl	8000a64 <display7SEG>
		break;
 80009e2:	e036      	b.n	8000a52 <update7SEG+0xb6>
	case 1:
		HAL_GPIO_WritePin(GPIOA, EN1_Pin, RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ea:	481c      	ldr	r0, [pc, #112]	; (8000a5c <update7SEG+0xc0>)
 80009ec:	f000 febb 	bl	8001766 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN2_Pin|EN3_Pin, SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 80009f6:	4819      	ldr	r0, [pc, #100]	; (8000a5c <update7SEG+0xc0>)
 80009f8:	f000 feb5 	bl	8001766 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[1]);
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <update7SEG+0xc4>)
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 f82f 	bl	8000a64 <display7SEG>
		break;
 8000a06:	e024      	b.n	8000a52 <update7SEG+0xb6>
	case 2:
		HAL_GPIO_WritePin(GPIOA, EN2_Pin, RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a0e:	4813      	ldr	r0, [pc, #76]	; (8000a5c <update7SEG+0xc0>)
 8000a10:	f000 fea9 	bl	8001766 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN3_Pin, SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 8000a1a:	4810      	ldr	r0, [pc, #64]	; (8000a5c <update7SEG+0xc0>)
 8000a1c:	f000 fea3 	bl	8001766 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[2]);
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <update7SEG+0xc4>)
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 f81d 	bl	8000a64 <display7SEG>
		break;
 8000a2a:	e012      	b.n	8000a52 <update7SEG+0xb6>
	case 3:
		HAL_GPIO_WritePin(GPIOA, EN3_Pin, RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a32:	480a      	ldr	r0, [pc, #40]	; (8000a5c <update7SEG+0xc0>)
 8000a34:	f000 fe97 	bl	8001766 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin, SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000a3e:	4807      	ldr	r0, [pc, #28]	; (8000a5c <update7SEG+0xc0>)
 8000a40:	f000 fe91 	bl	8001766 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[3]);
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <update7SEG+0xc4>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f000 f80b 	bl	8000a64 <display7SEG>
		break;
 8000a4e:	e000      	b.n	8000a52 <update7SEG+0xb6>
	default:
		break;
 8000a50:	bf00      	nop
	}
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40010800 	.word	0x40010800
 8000a60:	20000094 	.word	0x20000094

08000a64 <display7SEG>:

void display7SEG(int num){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	// Turn off all SEG
	HAL_GPIO_WritePin(GPIOB, SEG0_Pin | SEG1_Pin | SEG2_Pin | SEG3_Pin |SEG4_Pin | SEG5_Pin | SEG6_Pin, SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	217f      	movs	r1, #127	; 0x7f
 8000a70:	4831      	ldr	r0, [pc, #196]	; (8000b38 <display7SEG+0xd4>)
 8000a72:	f000 fe78 	bl	8001766 <HAL_GPIO_WritePin>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2b09      	cmp	r3, #9
 8000a7a:	d853      	bhi.n	8000b24 <display7SEG+0xc0>
 8000a7c:	a201      	add	r2, pc, #4	; (adr r2, 8000a84 <display7SEG+0x20>)
 8000a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a82:	bf00      	nop
 8000a84:	08000aad 	.word	0x08000aad
 8000a88:	08000ab9 	.word	0x08000ab9
 8000a8c:	08000ac5 	.word	0x08000ac5
 8000a90:	08000ad1 	.word	0x08000ad1
 8000a94:	08000add 	.word	0x08000add
 8000a98:	08000ae9 	.word	0x08000ae9
 8000a9c:	08000af5 	.word	0x08000af5
 8000aa0:	08000b01 	.word	0x08000b01
 8000aa4:	08000b0d 	.word	0x08000b0d
 8000aa8:	08000b19 	.word	0x08000b19
	switch(num){
	case 0:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin | SEG1_Pin | SEG2_Pin | SEG3_Pin |SEG4_Pin | SEG5_Pin, RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	213f      	movs	r1, #63	; 0x3f
 8000ab0:	4821      	ldr	r0, [pc, #132]	; (8000b38 <display7SEG+0xd4>)
 8000ab2:	f000 fe58 	bl	8001766 <HAL_GPIO_WritePin>
		break;
 8000ab6:	e03b      	b.n	8000b30 <display7SEG+0xcc>
	case 1:
		HAL_GPIO_WritePin(GPIOB, SEG1_Pin | SEG2_Pin, RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2106      	movs	r1, #6
 8000abc:	481e      	ldr	r0, [pc, #120]	; (8000b38 <display7SEG+0xd4>)
 8000abe:	f000 fe52 	bl	8001766 <HAL_GPIO_WritePin>
		break;
 8000ac2:	e035      	b.n	8000b30 <display7SEG+0xcc>
	case 2:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin | SEG1_Pin | SEG3_Pin |SEG4_Pin |SEG6_Pin, RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	215b      	movs	r1, #91	; 0x5b
 8000ac8:	481b      	ldr	r0, [pc, #108]	; (8000b38 <display7SEG+0xd4>)
 8000aca:	f000 fe4c 	bl	8001766 <HAL_GPIO_WritePin>
		break;
 8000ace:	e02f      	b.n	8000b30 <display7SEG+0xcc>
	case 3:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin | SEG1_Pin | SEG2_Pin | SEG3_Pin |SEG6_Pin, RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	214f      	movs	r1, #79	; 0x4f
 8000ad4:	4818      	ldr	r0, [pc, #96]	; (8000b38 <display7SEG+0xd4>)
 8000ad6:	f000 fe46 	bl	8001766 <HAL_GPIO_WritePin>
		break;
 8000ada:	e029      	b.n	8000b30 <display7SEG+0xcc>
	case 4:
		HAL_GPIO_WritePin(GPIOB, SEG1_Pin | SEG2_Pin | SEG5_Pin |SEG6_Pin, RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2166      	movs	r1, #102	; 0x66
 8000ae0:	4815      	ldr	r0, [pc, #84]	; (8000b38 <display7SEG+0xd4>)
 8000ae2:	f000 fe40 	bl	8001766 <HAL_GPIO_WritePin>
		break;
 8000ae6:	e023      	b.n	8000b30 <display7SEG+0xcc>
	case 5:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin | SEG2_Pin | SEG3_Pin | SEG5_Pin |SEG6_Pin, RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	216d      	movs	r1, #109	; 0x6d
 8000aec:	4812      	ldr	r0, [pc, #72]	; (8000b38 <display7SEG+0xd4>)
 8000aee:	f000 fe3a 	bl	8001766 <HAL_GPIO_WritePin>
		break;
 8000af2:	e01d      	b.n	8000b30 <display7SEG+0xcc>
	case 6:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin | SEG2_Pin | SEG3_Pin |SEG4_Pin | SEG5_Pin |SEG6_Pin, RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	217d      	movs	r1, #125	; 0x7d
 8000af8:	480f      	ldr	r0, [pc, #60]	; (8000b38 <display7SEG+0xd4>)
 8000afa:	f000 fe34 	bl	8001766 <HAL_GPIO_WritePin>
		break;
 8000afe:	e017      	b.n	8000b30 <display7SEG+0xcc>
	case 7:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin | SEG1_Pin | SEG2_Pin, RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2107      	movs	r1, #7
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <display7SEG+0xd4>)
 8000b06:	f000 fe2e 	bl	8001766 <HAL_GPIO_WritePin>
		break;
 8000b0a:	e011      	b.n	8000b30 <display7SEG+0xcc>
	case 8:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin | SEG1_Pin | SEG2_Pin | SEG3_Pin |SEG4_Pin | SEG5_Pin |SEG6_Pin, RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	217f      	movs	r1, #127	; 0x7f
 8000b10:	4809      	ldr	r0, [pc, #36]	; (8000b38 <display7SEG+0xd4>)
 8000b12:	f000 fe28 	bl	8001766 <HAL_GPIO_WritePin>
		break;
 8000b16:	e00b      	b.n	8000b30 <display7SEG+0xcc>
	case 9:
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin | SEG1_Pin | SEG2_Pin | SEG3_Pin | SEG5_Pin |SEG6_Pin, RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	216f      	movs	r1, #111	; 0x6f
 8000b1c:	4806      	ldr	r0, [pc, #24]	; (8000b38 <display7SEG+0xd4>)
 8000b1e:	f000 fe22 	bl	8001766 <HAL_GPIO_WritePin>
		break;
 8000b22:	e005      	b.n	8000b30 <display7SEG+0xcc>
	default:
		// Present a hyphen "-" if counter < 0 or counter > 9
		HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2140      	movs	r1, #64	; 0x40
 8000b28:	4803      	ldr	r0, [pc, #12]	; (8000b38 <display7SEG+0xd4>)
 8000b2a:	f000 fe1c 	bl	8001766 <HAL_GPIO_WritePin>
		break;
 8000b2e:	bf00      	nop
	}
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40010c00 	.word	0x40010c00

08000b3c <led7_segment>:

void led7_segment(){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	if(isTimerExpired(4) == 1){
 8000b40:	2004      	movs	r0, #4
 8000b42:	f000 f951 	bl	8000de8 <isTimerExpired>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d113      	bne.n	8000b74 <led7_segment+0x38>
		setTimer(4, 250);
 8000b4c:	21fa      	movs	r1, #250	; 0xfa
 8000b4e:	2004      	movs	r0, #4
 8000b50:	f000 f92a 	bl	8000da8 <setTimer>
		update7SEG(index_led);
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <led7_segment+0x3c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ff1f 	bl	800099c <update7SEG>
		index_led = (index_led + 1) % MAX_LED;
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <led7_segment+0x3c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	3301      	adds	r3, #1
 8000b64:	2204      	movs	r2, #4
 8000b66:	fb93 f1f2 	sdiv	r1, r3, r2
 8000b6a:	fb02 f201 	mul.w	r2, r2, r1
 8000b6e:	1a9b      	subs	r3, r3, r2
 8000b70:	4a01      	ldr	r2, [pc, #4]	; (8000b78 <led7_segment+0x3c>)
 8000b72:	6013      	str	r3, [r2, #0]
	}
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000090 	.word	0x20000090

08000b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b80:	f000 faf0 	bl	8001164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b84:	f000 f814 	bl	8000bb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000b88:	f000 f84e 	bl	8000c28 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000b8c:	f000 f898 	bl	8000cc0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <main+0x2c>)
 8000b92:	f001 fa45 	bl	8002020 <HAL_TIM_Base_Start_IT>
  status = INIT;
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <main+0x30>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_automatic();
 8000b9c:	f7ff fb88 	bl	80002b0 <fsm_automatic>
//	  fsm_manual();
	  fsm_setting();
 8000ba0:	f7ff fd1c 	bl	80005dc <fsm_setting>
	  fsm_automatic();
 8000ba4:	e7fa      	b.n	8000b9c <main+0x20>
 8000ba6:	bf00      	nop
 8000ba8:	200000a4 	.word	0x200000a4
 8000bac:	2000008c 	.word	0x2000008c

08000bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b090      	sub	sp, #64	; 0x40
 8000bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb6:	f107 0318 	add.w	r3, r7, #24
 8000bba:	2228      	movs	r2, #40	; 0x28
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f001 fdde 	bl	8002780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bda:	2310      	movs	r3, #16
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be2:	f107 0318 	add.w	r3, r7, #24
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 fdee 	bl	80017c8 <HAL_RCC_OscConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000bf2:	f000 f8d3 	bl	8000d9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf6:	230f      	movs	r3, #15
 8000bf8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f001 f85a 	bl	8001cc8 <HAL_RCC_ClockConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c1a:	f000 f8bf 	bl	8000d9c <Error_Handler>
  }
}
 8000c1e:	bf00      	nop
 8000c20:	3740      	adds	r7, #64	; 0x40
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2e:	f107 0308 	add.w	r3, r7, #8
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c44:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <MX_TIM2_Init+0x94>)
 8000c46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <MX_TIM2_Init+0x94>)
 8000c4e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c54:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <MX_TIM2_Init+0x94>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <MX_TIM2_Init+0x94>)
 8000c5c:	2209      	movs	r2, #9
 8000c5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <MX_TIM2_Init+0x94>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <MX_TIM2_Init+0x94>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c6c:	4813      	ldr	r0, [pc, #76]	; (8000cbc <MX_TIM2_Init+0x94>)
 8000c6e:	f001 f987 	bl	8001f80 <HAL_TIM_Base_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c78:	f000 f890 	bl	8000d9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	4619      	mov	r1, r3
 8000c88:	480c      	ldr	r0, [pc, #48]	; (8000cbc <MX_TIM2_Init+0x94>)
 8000c8a:	f001 fb05 	bl	8002298 <HAL_TIM_ConfigClockSource>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c94:	f000 f882 	bl	8000d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4805      	ldr	r0, [pc, #20]	; (8000cbc <MX_TIM2_Init+0x94>)
 8000ca6:	f001 fcdd 	bl	8002664 <HAL_TIMEx_MasterConfigSynchronization>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cb0:	f000 f874 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cb4:	bf00      	nop
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	200000a4 	.word	0x200000a4

08000cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	f107 0308 	add.w	r3, r7, #8
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd4:	4b28      	ldr	r3, [pc, #160]	; (8000d78 <MX_GPIO_Init+0xb8>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a27      	ldr	r2, [pc, #156]	; (8000d78 <MX_GPIO_Init+0xb8>)
 8000cda:	f043 0304 	orr.w	r3, r3, #4
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b25      	ldr	r3, [pc, #148]	; (8000d78 <MX_GPIO_Init+0xb8>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cec:	4b22      	ldr	r3, [pc, #136]	; (8000d78 <MX_GPIO_Init+0xb8>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a21      	ldr	r2, [pc, #132]	; (8000d78 <MX_GPIO_Init+0xb8>)
 8000cf2:	f043 0308 	orr.w	r3, r3, #8
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <MX_GPIO_Init+0xb8>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f003 0308 	and.w	r3, r3, #8
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|RED1_Pin
 8000d04:	2200      	movs	r2, #0
 8000d06:	f64f 417f 	movw	r1, #64639	; 0xfc7f
 8000d0a:	481c      	ldr	r0, [pc, #112]	; (8000d7c <MX_GPIO_Init+0xbc>)
 8000d0c:	f000 fd2b 	bl	8001766 <HAL_GPIO_WritePin>
                          |YEL1_Pin|GRE1_Pin|RED2_Pin|YEL2_Pin
                          |GRE2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8000d16:	481a      	ldr	r0, [pc, #104]	; (8000d80 <MX_GPIO_Init+0xc0>)
 8000d18:	f000 fd25 	bl	8001766 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUT1_Pin BUT2_Pin BUT3_Pin PA4 */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin|BUT3_Pin|GPIO_PIN_4;
 8000d1c:	231e      	movs	r3, #30
 8000d1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d24:	2301      	movs	r3, #1
 8000d26:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d28:	f107 0308 	add.w	r3, r7, #8
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4814      	ldr	r0, [pc, #80]	; (8000d80 <MX_GPIO_Init+0xc0>)
 8000d30:	f000 fb88 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin RED1_Pin
                           YEL1_Pin GRE1_Pin RED2_Pin YEL2_Pin
                           GRE2_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|RED1_Pin
 8000d34:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 8000d38:	60bb      	str	r3, [r7, #8]
                          |YEL1_Pin|GRE1_Pin|RED2_Pin|YEL2_Pin
                          |GRE2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2302      	movs	r3, #2
 8000d44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d46:	f107 0308 	add.w	r3, r7, #8
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480b      	ldr	r0, [pc, #44]	; (8000d7c <MX_GPIO_Init+0xbc>)
 8000d4e:	f000 fb79 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 8000d52:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000d56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2302      	movs	r3, #2
 8000d62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d64:	f107 0308 	add.w	r3, r7, #8
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_GPIO_Init+0xc0>)
 8000d6c:	f000 fb6a 	bl	8001444 <HAL_GPIO_Init>

}
 8000d70:	bf00      	nop
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40010c00 	.word	0x40010c00
 8000d80:	40010800 	.word	0x40010800

08000d84 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	timerRun();
 8000d8c:	f000 f846 	bl	8000e1c <timerRun>
	getKeyInput();
 8000d90:	f7ff f9f6 	bl	8000180 <getKeyInput>
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da0:	b672      	cpsid	i
}
 8000da2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <Error_Handler+0x8>
	...

08000da8 <setTimer>:
#define TIMER_TICK 10 // chu ky cua ham timer interrupt, da duoc khai bao trong file header

int timer_counter[MAX_COUNTER];
int timer_flag[MAX_COUNTER];

void setTimer(int index, int value){
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
	timer_counter[index] = value / TIMER_TICK;
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	4a09      	ldr	r2, [pc, #36]	; (8000ddc <setTimer+0x34>)
 8000db6:	fb82 1203 	smull	r1, r2, r2, r3
 8000dba:	1092      	asrs	r2, r2, #2
 8000dbc:	17db      	asrs	r3, r3, #31
 8000dbe:	1ad2      	subs	r2, r2, r3
 8000dc0:	4907      	ldr	r1, [pc, #28]	; (8000de0 <setTimer+0x38>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8000dc8:	4a06      	ldr	r2, [pc, #24]	; (8000de4 <setTimer+0x3c>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2100      	movs	r1, #0
 8000dce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	66666667 	.word	0x66666667
 8000de0:	200000ec 	.word	0x200000ec
 8000de4:	20000100 	.word	0x20000100

08000de8 <isTimerExpired>:

int isTimerExpired(int index){
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	if(timer_flag[index] == 1){
 8000df0:	4a09      	ldr	r2, [pc, #36]	; (8000e18 <isTimerExpired+0x30>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d106      	bne.n	8000e0a <isTimerExpired+0x22>
		timer_flag[index] = 0;
 8000dfc:	4a06      	ldr	r2, [pc, #24]	; (8000e18 <isTimerExpired+0x30>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2100      	movs	r1, #0
 8000e02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e000      	b.n	8000e0c <isTimerExpired+0x24>
	}
	return 0;
 8000e0a:	2300      	movs	r3, #0
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000100 	.word	0x20000100

08000e1c <timerRun>:

void timerRun(){
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_COUNTER; i++){
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	e01c      	b.n	8000e62 <timerRun+0x46>
		if(timer_counter[i] > 0){
 8000e28:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <timerRun+0x58>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	dd13      	ble.n	8000e5c <timerRun+0x40>
			timer_counter[i]--;
 8000e34:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <timerRun+0x58>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3c:	1e5a      	subs	r2, r3, #1
 8000e3e:	490d      	ldr	r1, [pc, #52]	; (8000e74 <timerRun+0x58>)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] == 0)
 8000e46:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <timerRun+0x58>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d104      	bne.n	8000e5c <timerRun+0x40>
				timer_flag[i] = 1;
 8000e52:	4a09      	ldr	r2, [pc, #36]	; (8000e78 <timerRun+0x5c>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2101      	movs	r1, #1
 8000e58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < MAX_COUNTER; i++){
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b04      	cmp	r3, #4
 8000e66:	dddf      	ble.n	8000e28 <timerRun+0xc>
		}
	}
}
 8000e68:	bf00      	nop
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	200000ec 	.word	0x200000ec
 8000e78:	20000100 	.word	0x20000100

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <HAL_MspInit+0x5c>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <HAL_MspInit+0x5c>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6193      	str	r3, [r2, #24]
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_MspInit+0x5c>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <HAL_MspInit+0x5c>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <HAL_MspInit+0x5c>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	61d3      	str	r3, [r2, #28]
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <HAL_MspInit+0x5c>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_MspInit+0x60>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_MspInit+0x60>)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	3714      	adds	r7, #20
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40010000 	.word	0x40010000

08000ee0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ef0:	d113      	bne.n	8000f1a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <HAL_TIM_Base_MspInit+0x44>)
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	4a0b      	ldr	r2, [pc, #44]	; (8000f24 <HAL_TIM_Base_MspInit+0x44>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	61d3      	str	r3, [r2, #28]
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <HAL_TIM_Base_MspInit+0x44>)
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	201c      	movs	r0, #28
 8000f10:	f000 fa61 	bl	80013d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f14:	201c      	movs	r0, #28
 8000f16:	f000 fa7a 	bl	800140e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40021000 	.word	0x40021000

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <NMI_Handler+0x4>

08000f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <HardFault_Handler+0x4>

08000f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <MemManage_Handler+0x4>

08000f3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr

08000f52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr

08000f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr

08000f6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6e:	f000 f93f 	bl	80011f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <TIM2_IRQHandler+0x10>)
 8000f7e:	f001 f89b 	bl	80020b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200000a4 	.word	0x200000a4

08000f8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <setRed1>:
 *      Author: NGUYEN GIAP
 */

#include "traffic_light.h"

void setRed1(){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, RED1_Pin, SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <setRed1+0x20>)
 8000fa4:	f000 fbdf 	bl	8001766 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, YEL1_Pin|GRE1_Pin, RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000fae:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <setRed1+0x20>)
 8000fb0:	f000 fbd9 	bl	8001766 <HAL_GPIO_WritePin>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40010c00 	.word	0x40010c00

08000fbc <setYellow1>:
void setYellow1(){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, YEL1_Pin, SET);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <setYellow1+0x20>)
 8000fc8:	f000 fbcd 	bl	8001766 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RED1_Pin|GRE1_Pin, RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8000fd2:	4802      	ldr	r0, [pc, #8]	; (8000fdc <setYellow1+0x20>)
 8000fd4:	f000 fbc7 	bl	8001766 <HAL_GPIO_WritePin>
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40010c00 	.word	0x40010c00

08000fe0 <setGreen1>:
void setGreen1(){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GRE1_Pin, SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <setGreen1+0x20>)
 8000fec:	f000 fbbb 	bl	8001766 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RED1_Pin|YEL1_Pin, RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000ff6:	4802      	ldr	r0, [pc, #8]	; (8001000 <setGreen1+0x20>)
 8000ff8:	f000 fbb5 	bl	8001766 <HAL_GPIO_WritePin>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40010c00 	.word	0x40010c00

08001004 <setRed2>:



void setRed2(){
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, RED2_Pin, SET);
 8001008:	2201      	movs	r2, #1
 800100a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <setRed2+0x20>)
 8001010:	f000 fba9 	bl	8001766 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, YEL2_Pin|GRE2_Pin, RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800101a:	4802      	ldr	r0, [pc, #8]	; (8001024 <setRed2+0x20>)
 800101c:	f000 fba3 	bl	8001766 <HAL_GPIO_WritePin>
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40010c00 	.word	0x40010c00

08001028 <setYellow2>:
void setYellow2(){
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, YEL2_Pin, SET);
 800102c:	2201      	movs	r2, #1
 800102e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <setYellow2+0x20>)
 8001034:	f000 fb97 	bl	8001766 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RED2_Pin|GRE2_Pin, RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800103e:	4802      	ldr	r0, [pc, #8]	; (8001048 <setYellow2+0x20>)
 8001040:	f000 fb91 	bl	8001766 <HAL_GPIO_WritePin>
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40010c00 	.word	0x40010c00

0800104c <setGreen2>:
void setGreen2(){
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GRE2_Pin, SET);
 8001050:	2201      	movs	r2, #1
 8001052:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <setGreen2+0x20>)
 8001058:	f000 fb85 	bl	8001766 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RED2_Pin|YEL2_Pin, RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001062:	4802      	ldr	r0, [pc, #8]	; (800106c <setGreen2+0x20>)
 8001064:	f000 fb7f 	bl	8001766 <HAL_GPIO_WritePin>
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40010c00 	.word	0x40010c00

08001070 <toggleRed1>:



void toggleRed1(){
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 8001074:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <toggleRed1+0x14>)
 800107a:	f000 fb8c 	bl	8001796 <HAL_GPIO_TogglePin>
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40010c00 	.word	0x40010c00

08001088 <toggleYellow1>:
void toggleYellow1(){
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(YEL1_GPIO_Port, YEL1_Pin);
 800108c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <toggleYellow1+0x14>)
 8001092:	f000 fb80 	bl	8001796 <HAL_GPIO_TogglePin>
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40010c00 	.word	0x40010c00

080010a0 <toggleGreen1>:
void toggleGreen1(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GRE1_GPIO_Port, GRE1_Pin);
 80010a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <toggleGreen1+0x14>)
 80010aa:	f000 fb74 	bl	8001796 <HAL_GPIO_TogglePin>
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40010c00 	.word	0x40010c00

080010b8 <toggleRed2>:



void toggleRed2(){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 80010bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <toggleRed2+0x14>)
 80010c2:	f000 fb68 	bl	8001796 <HAL_GPIO_TogglePin>
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40010c00 	.word	0x40010c00

080010d0 <toggleYellow2>:
void toggleYellow2(){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(YEL2_GPIO_Port, YEL2_Pin);
 80010d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <toggleYellow2+0x14>)
 80010da:	f000 fb5c 	bl	8001796 <HAL_GPIO_TogglePin>
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40010c00 	.word	0x40010c00

080010e8 <toggleGreen2>:
void toggleGreen2(){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GRE2_GPIO_Port, GRE2_Pin);
 80010ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <toggleGreen2+0x14>)
 80010f2:	f000 fb50 	bl	8001796 <HAL_GPIO_TogglePin>
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40010c00 	.word	0x40010c00

08001100 <clearAllLeds>:



void clearAllLeds(){
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, RED1_Pin|YEL1_Pin|GRE1_Pin|RED2_Pin|YEL2_Pin|GRE2_Pin, RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800110a:	4802      	ldr	r0, [pc, #8]	; (8001114 <clearAllLeds+0x14>)
 800110c:	f000 fb2b 	bl	8001766 <HAL_GPIO_WritePin>
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40010c00 	.word	0x40010c00

08001118 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001118:	f7ff ff38 	bl	8000f8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800111c:	480b      	ldr	r0, [pc, #44]	; (800114c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800111e:	490c      	ldr	r1, [pc, #48]	; (8001150 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001120:	4a0c      	ldr	r2, [pc, #48]	; (8001154 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001124:	e002      	b.n	800112c <LoopCopyDataInit>

08001126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112a:	3304      	adds	r3, #4

0800112c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800112c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001130:	d3f9      	bcc.n	8001126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001132:	4a09      	ldr	r2, [pc, #36]	; (8001158 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001134:	4c09      	ldr	r4, [pc, #36]	; (800115c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001138:	e001      	b.n	800113e <LoopFillZerobss>

0800113a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800113c:	3204      	adds	r2, #4

0800113e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001140:	d3fb      	bcc.n	800113a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001142:	f001 faf9 	bl	8002738 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001146:	f7ff fd19 	bl	8000b7c <main>
  bx lr
 800114a:	4770      	bx	lr
  ldr r0, =_sdata
 800114c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001150:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8001154:	080027e0 	.word	0x080027e0
  ldr r2, =_sbss
 8001158:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 800115c:	20000118 	.word	0x20000118

08001160 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC1_2_IRQHandler>
	...

08001164 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <HAL_Init+0x28>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a07      	ldr	r2, [pc, #28]	; (800118c <HAL_Init+0x28>)
 800116e:	f043 0310 	orr.w	r3, r3, #16
 8001172:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001174:	2003      	movs	r0, #3
 8001176:	f000 f923 	bl	80013c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800117a:	200f      	movs	r0, #15
 800117c:	f000 f808 	bl	8001190 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001180:	f7ff fe7c 	bl	8000e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40022000 	.word	0x40022000

08001190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_InitTick+0x54>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_InitTick+0x58>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4619      	mov	r1, r3
 80011a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 f93b 	bl	800142a <HAL_SYSTICK_Config>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00e      	b.n	80011dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b0f      	cmp	r3, #15
 80011c2:	d80a      	bhi.n	80011da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c4:	2200      	movs	r2, #0
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295
 80011cc:	f000 f903 	bl	80013d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d0:	4a06      	ldr	r2, [pc, #24]	; (80011ec <HAL_InitTick+0x5c>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	e000      	b.n	80011dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000044 	.word	0x20000044
 80011e8:	2000004c 	.word	0x2000004c
 80011ec:	20000048 	.word	0x20000048

080011f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <HAL_IncTick+0x1c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_IncTick+0x20>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	4a03      	ldr	r2, [pc, #12]	; (8001210 <HAL_IncTick+0x20>)
 8001202:	6013      	str	r3, [r2, #0]
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	2000004c 	.word	0x2000004c
 8001210:	20000114 	.word	0x20000114

08001214 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return uwTick;
 8001218:	4b02      	ldr	r3, [pc, #8]	; (8001224 <HAL_GetTick+0x10>)
 800121a:	681b      	ldr	r3, [r3, #0]
}
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	20000114 	.word	0x20000114

08001228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <__NVIC_SetPriorityGrouping+0x44>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001244:	4013      	ands	r3, r2
 8001246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125a:	4a04      	ldr	r2, [pc, #16]	; (800126c <__NVIC_SetPriorityGrouping+0x44>)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	60d3      	str	r3, [r2, #12]
}
 8001260:	bf00      	nop
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <__NVIC_GetPriorityGrouping+0x18>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	0a1b      	lsrs	r3, r3, #8
 800127a:	f003 0307 	and.w	r3, r3, #7
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0b      	blt.n	80012b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	f003 021f 	and.w	r2, r3, #31
 80012a4:	4906      	ldr	r1, [pc, #24]	; (80012c0 <__NVIC_EnableIRQ+0x34>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	095b      	lsrs	r3, r3, #5
 80012ac:	2001      	movs	r0, #1
 80012ae:	fa00 f202 	lsl.w	r2, r0, r2
 80012b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	e000e100 	.word	0xe000e100

080012c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	db0a      	blt.n	80012ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	490c      	ldr	r1, [pc, #48]	; (8001310 <__NVIC_SetPriority+0x4c>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	0112      	lsls	r2, r2, #4
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	440b      	add	r3, r1
 80012e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ec:	e00a      	b.n	8001304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4908      	ldr	r1, [pc, #32]	; (8001314 <__NVIC_SetPriority+0x50>)
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	3b04      	subs	r3, #4
 80012fc:	0112      	lsls	r2, r2, #4
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	440b      	add	r3, r1
 8001302:	761a      	strb	r2, [r3, #24]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000e100 	.word	0xe000e100
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001318:	b480      	push	{r7}
 800131a:	b089      	sub	sp, #36	; 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f1c3 0307 	rsb	r3, r3, #7
 8001332:	2b04      	cmp	r3, #4
 8001334:	bf28      	it	cs
 8001336:	2304      	movcs	r3, #4
 8001338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3304      	adds	r3, #4
 800133e:	2b06      	cmp	r3, #6
 8001340:	d902      	bls.n	8001348 <NVIC_EncodePriority+0x30>
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3b03      	subs	r3, #3
 8001346:	e000      	b.n	800134a <NVIC_EncodePriority+0x32>
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	f04f 32ff 	mov.w	r2, #4294967295
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43da      	mvns	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	401a      	ands	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001360:	f04f 31ff 	mov.w	r1, #4294967295
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	43d9      	mvns	r1, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	4313      	orrs	r3, r2
         );
}
 8001372:	4618      	mov	r0, r3
 8001374:	3724      	adds	r7, #36	; 0x24
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800138c:	d301      	bcc.n	8001392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138e:	2301      	movs	r3, #1
 8001390:	e00f      	b.n	80013b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <SysTick_Config+0x40>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139a:	210f      	movs	r1, #15
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f7ff ff90 	bl	80012c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <SysTick_Config+0x40>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <SysTick_Config+0x40>)
 80013ac:	2207      	movs	r2, #7
 80013ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	e000e010 	.word	0xe000e010

080013c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff2d 	bl	8001228 <__NVIC_SetPriorityGrouping>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e8:	f7ff ff42 	bl	8001270 <__NVIC_GetPriorityGrouping>
 80013ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	6978      	ldr	r0, [r7, #20]
 80013f4:	f7ff ff90 	bl	8001318 <NVIC_EncodePriority>
 80013f8:	4602      	mov	r2, r0
 80013fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff5f 	bl	80012c4 <__NVIC_SetPriority>
}
 8001406:	bf00      	nop
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff35 	bl	800128c <__NVIC_EnableIRQ>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ffa2 	bl	800137c <SysTick_Config>
 8001438:	4603      	mov	r3, r0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001444:	b480      	push	{r7}
 8001446:	b08b      	sub	sp, #44	; 0x2c
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001456:	e148      	b.n	80016ea <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001458:	2201      	movs	r2, #1
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	69fa      	ldr	r2, [r7, #28]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	429a      	cmp	r2, r3
 8001472:	f040 8137 	bne.w	80016e4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	4aa3      	ldr	r2, [pc, #652]	; (8001708 <HAL_GPIO_Init+0x2c4>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d05e      	beq.n	800153e <HAL_GPIO_Init+0xfa>
 8001480:	4aa1      	ldr	r2, [pc, #644]	; (8001708 <HAL_GPIO_Init+0x2c4>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d875      	bhi.n	8001572 <HAL_GPIO_Init+0x12e>
 8001486:	4aa1      	ldr	r2, [pc, #644]	; (800170c <HAL_GPIO_Init+0x2c8>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d058      	beq.n	800153e <HAL_GPIO_Init+0xfa>
 800148c:	4a9f      	ldr	r2, [pc, #636]	; (800170c <HAL_GPIO_Init+0x2c8>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d86f      	bhi.n	8001572 <HAL_GPIO_Init+0x12e>
 8001492:	4a9f      	ldr	r2, [pc, #636]	; (8001710 <HAL_GPIO_Init+0x2cc>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d052      	beq.n	800153e <HAL_GPIO_Init+0xfa>
 8001498:	4a9d      	ldr	r2, [pc, #628]	; (8001710 <HAL_GPIO_Init+0x2cc>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d869      	bhi.n	8001572 <HAL_GPIO_Init+0x12e>
 800149e:	4a9d      	ldr	r2, [pc, #628]	; (8001714 <HAL_GPIO_Init+0x2d0>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d04c      	beq.n	800153e <HAL_GPIO_Init+0xfa>
 80014a4:	4a9b      	ldr	r2, [pc, #620]	; (8001714 <HAL_GPIO_Init+0x2d0>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d863      	bhi.n	8001572 <HAL_GPIO_Init+0x12e>
 80014aa:	4a9b      	ldr	r2, [pc, #620]	; (8001718 <HAL_GPIO_Init+0x2d4>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d046      	beq.n	800153e <HAL_GPIO_Init+0xfa>
 80014b0:	4a99      	ldr	r2, [pc, #612]	; (8001718 <HAL_GPIO_Init+0x2d4>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d85d      	bhi.n	8001572 <HAL_GPIO_Init+0x12e>
 80014b6:	2b12      	cmp	r3, #18
 80014b8:	d82a      	bhi.n	8001510 <HAL_GPIO_Init+0xcc>
 80014ba:	2b12      	cmp	r3, #18
 80014bc:	d859      	bhi.n	8001572 <HAL_GPIO_Init+0x12e>
 80014be:	a201      	add	r2, pc, #4	; (adr r2, 80014c4 <HAL_GPIO_Init+0x80>)
 80014c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c4:	0800153f 	.word	0x0800153f
 80014c8:	08001519 	.word	0x08001519
 80014cc:	0800152b 	.word	0x0800152b
 80014d0:	0800156d 	.word	0x0800156d
 80014d4:	08001573 	.word	0x08001573
 80014d8:	08001573 	.word	0x08001573
 80014dc:	08001573 	.word	0x08001573
 80014e0:	08001573 	.word	0x08001573
 80014e4:	08001573 	.word	0x08001573
 80014e8:	08001573 	.word	0x08001573
 80014ec:	08001573 	.word	0x08001573
 80014f0:	08001573 	.word	0x08001573
 80014f4:	08001573 	.word	0x08001573
 80014f8:	08001573 	.word	0x08001573
 80014fc:	08001573 	.word	0x08001573
 8001500:	08001573 	.word	0x08001573
 8001504:	08001573 	.word	0x08001573
 8001508:	08001521 	.word	0x08001521
 800150c:	08001535 	.word	0x08001535
 8001510:	4a82      	ldr	r2, [pc, #520]	; (800171c <HAL_GPIO_Init+0x2d8>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d013      	beq.n	800153e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001516:	e02c      	b.n	8001572 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	623b      	str	r3, [r7, #32]
          break;
 800151e:	e029      	b.n	8001574 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	3304      	adds	r3, #4
 8001526:	623b      	str	r3, [r7, #32]
          break;
 8001528:	e024      	b.n	8001574 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	3308      	adds	r3, #8
 8001530:	623b      	str	r3, [r7, #32]
          break;
 8001532:	e01f      	b.n	8001574 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	330c      	adds	r3, #12
 800153a:	623b      	str	r3, [r7, #32]
          break;
 800153c:	e01a      	b.n	8001574 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d102      	bne.n	800154c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001546:	2304      	movs	r3, #4
 8001548:	623b      	str	r3, [r7, #32]
          break;
 800154a:	e013      	b.n	8001574 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d105      	bne.n	8001560 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001554:	2308      	movs	r3, #8
 8001556:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69fa      	ldr	r2, [r7, #28]
 800155c:	611a      	str	r2, [r3, #16]
          break;
 800155e:	e009      	b.n	8001574 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001560:	2308      	movs	r3, #8
 8001562:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	615a      	str	r2, [r3, #20]
          break;
 800156a:	e003      	b.n	8001574 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
          break;
 8001570:	e000      	b.n	8001574 <HAL_GPIO_Init+0x130>
          break;
 8001572:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	2bff      	cmp	r3, #255	; 0xff
 8001578:	d801      	bhi.n	800157e <HAL_GPIO_Init+0x13a>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	e001      	b.n	8001582 <HAL_GPIO_Init+0x13e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3304      	adds	r3, #4
 8001582:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	2bff      	cmp	r3, #255	; 0xff
 8001588:	d802      	bhi.n	8001590 <HAL_GPIO_Init+0x14c>
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	e002      	b.n	8001596 <HAL_GPIO_Init+0x152>
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	3b08      	subs	r3, #8
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	210f      	movs	r1, #15
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	fa01 f303 	lsl.w	r3, r1, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	401a      	ands	r2, r3
 80015a8:	6a39      	ldr	r1, [r7, #32]
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	fa01 f303 	lsl.w	r3, r1, r3
 80015b0:	431a      	orrs	r2, r3
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 8090 	beq.w	80016e4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015c4:	4b56      	ldr	r3, [pc, #344]	; (8001720 <HAL_GPIO_Init+0x2dc>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	4a55      	ldr	r2, [pc, #340]	; (8001720 <HAL_GPIO_Init+0x2dc>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6193      	str	r3, [r2, #24]
 80015d0:	4b53      	ldr	r3, [pc, #332]	; (8001720 <HAL_GPIO_Init+0x2dc>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015dc:	4a51      	ldr	r2, [pc, #324]	; (8001724 <HAL_GPIO_Init+0x2e0>)
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	089b      	lsrs	r3, r3, #2
 80015e2:	3302      	adds	r3, #2
 80015e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	220f      	movs	r2, #15
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	4013      	ands	r3, r2
 80015fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a49      	ldr	r2, [pc, #292]	; (8001728 <HAL_GPIO_Init+0x2e4>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d00d      	beq.n	8001624 <HAL_GPIO_Init+0x1e0>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a48      	ldr	r2, [pc, #288]	; (800172c <HAL_GPIO_Init+0x2e8>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d007      	beq.n	8001620 <HAL_GPIO_Init+0x1dc>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a47      	ldr	r2, [pc, #284]	; (8001730 <HAL_GPIO_Init+0x2ec>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d101      	bne.n	800161c <HAL_GPIO_Init+0x1d8>
 8001618:	2302      	movs	r3, #2
 800161a:	e004      	b.n	8001626 <HAL_GPIO_Init+0x1e2>
 800161c:	2303      	movs	r3, #3
 800161e:	e002      	b.n	8001626 <HAL_GPIO_Init+0x1e2>
 8001620:	2301      	movs	r3, #1
 8001622:	e000      	b.n	8001626 <HAL_GPIO_Init+0x1e2>
 8001624:	2300      	movs	r3, #0
 8001626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001628:	f002 0203 	and.w	r2, r2, #3
 800162c:	0092      	lsls	r2, r2, #2
 800162e:	4093      	lsls	r3, r2
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	4313      	orrs	r3, r2
 8001634:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001636:	493b      	ldr	r1, [pc, #236]	; (8001724 <HAL_GPIO_Init+0x2e0>)
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	089b      	lsrs	r3, r3, #2
 800163c:	3302      	adds	r3, #2
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d006      	beq.n	800165e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001650:	4b38      	ldr	r3, [pc, #224]	; (8001734 <HAL_GPIO_Init+0x2f0>)
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	4937      	ldr	r1, [pc, #220]	; (8001734 <HAL_GPIO_Init+0x2f0>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	608b      	str	r3, [r1, #8]
 800165c:	e006      	b.n	800166c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800165e:	4b35      	ldr	r3, [pc, #212]	; (8001734 <HAL_GPIO_Init+0x2f0>)
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	43db      	mvns	r3, r3
 8001666:	4933      	ldr	r1, [pc, #204]	; (8001734 <HAL_GPIO_Init+0x2f0>)
 8001668:	4013      	ands	r3, r2
 800166a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d006      	beq.n	8001686 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001678:	4b2e      	ldr	r3, [pc, #184]	; (8001734 <HAL_GPIO_Init+0x2f0>)
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	492d      	ldr	r1, [pc, #180]	; (8001734 <HAL_GPIO_Init+0x2f0>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	60cb      	str	r3, [r1, #12]
 8001684:	e006      	b.n	8001694 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001686:	4b2b      	ldr	r3, [pc, #172]	; (8001734 <HAL_GPIO_Init+0x2f0>)
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	43db      	mvns	r3, r3
 800168e:	4929      	ldr	r1, [pc, #164]	; (8001734 <HAL_GPIO_Init+0x2f0>)
 8001690:	4013      	ands	r3, r2
 8001692:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d006      	beq.n	80016ae <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_GPIO_Init+0x2f0>)
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	4923      	ldr	r1, [pc, #140]	; (8001734 <HAL_GPIO_Init+0x2f0>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]
 80016ac:	e006      	b.n	80016bc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016ae:	4b21      	ldr	r3, [pc, #132]	; (8001734 <HAL_GPIO_Init+0x2f0>)
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	491f      	ldr	r1, [pc, #124]	; (8001734 <HAL_GPIO_Init+0x2f0>)
 80016b8:	4013      	ands	r3, r2
 80016ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d006      	beq.n	80016d6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016c8:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_GPIO_Init+0x2f0>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4919      	ldr	r1, [pc, #100]	; (8001734 <HAL_GPIO_Init+0x2f0>)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	600b      	str	r3, [r1, #0]
 80016d4:	e006      	b.n	80016e4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016d6:	4b17      	ldr	r3, [pc, #92]	; (8001734 <HAL_GPIO_Init+0x2f0>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	43db      	mvns	r3, r3
 80016de:	4915      	ldr	r1, [pc, #84]	; (8001734 <HAL_GPIO_Init+0x2f0>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	3301      	adds	r3, #1
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	fa22 f303 	lsr.w	r3, r2, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f47f aeaf 	bne.w	8001458 <HAL_GPIO_Init+0x14>
  }
}
 80016fa:	bf00      	nop
 80016fc:	bf00      	nop
 80016fe:	372c      	adds	r7, #44	; 0x2c
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	10320000 	.word	0x10320000
 800170c:	10310000 	.word	0x10310000
 8001710:	10220000 	.word	0x10220000
 8001714:	10210000 	.word	0x10210000
 8001718:	10120000 	.word	0x10120000
 800171c:	10110000 	.word	0x10110000
 8001720:	40021000 	.word	0x40021000
 8001724:	40010000 	.word	0x40010000
 8001728:	40010800 	.word	0x40010800
 800172c:	40010c00 	.word	0x40010c00
 8001730:	40011000 	.word	0x40011000
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	887b      	ldrh	r3, [r7, #2]
 800174a:	4013      	ands	r3, r2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d002      	beq.n	8001756 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001750:	2301      	movs	r3, #1
 8001752:	73fb      	strb	r3, [r7, #15]
 8001754:	e001      	b.n	800175a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001756:	2300      	movs	r3, #0
 8001758:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800175a:	7bfb      	ldrb	r3, [r7, #15]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr

08001766 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	460b      	mov	r3, r1
 8001770:	807b      	strh	r3, [r7, #2]
 8001772:	4613      	mov	r3, r2
 8001774:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001776:	787b      	ldrb	r3, [r7, #1]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800177c:	887a      	ldrh	r2, [r7, #2]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001782:	e003      	b.n	800178c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001784:	887b      	ldrh	r3, [r7, #2]
 8001786:	041a      	lsls	r2, r3, #16
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	611a      	str	r2, [r3, #16]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr

08001796 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001796:	b480      	push	{r7}
 8001798:	b085      	sub	sp, #20
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	460b      	mov	r3, r1
 80017a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017a8:	887a      	ldrh	r2, [r7, #2]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	4013      	ands	r3, r2
 80017ae:	041a      	lsls	r2, r3, #16
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	43d9      	mvns	r1, r3
 80017b4:	887b      	ldrh	r3, [r7, #2]
 80017b6:	400b      	ands	r3, r1
 80017b8:	431a      	orrs	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	611a      	str	r2, [r3, #16]
}
 80017be:	bf00      	nop
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e26c      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 8087 	beq.w	80018f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017e8:	4b92      	ldr	r3, [pc, #584]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 030c 	and.w	r3, r3, #12
 80017f0:	2b04      	cmp	r3, #4
 80017f2:	d00c      	beq.n	800180e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017f4:	4b8f      	ldr	r3, [pc, #572]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 030c 	and.w	r3, r3, #12
 80017fc:	2b08      	cmp	r3, #8
 80017fe:	d112      	bne.n	8001826 <HAL_RCC_OscConfig+0x5e>
 8001800:	4b8c      	ldr	r3, [pc, #560]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800180c:	d10b      	bne.n	8001826 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180e:	4b89      	ldr	r3, [pc, #548]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d06c      	beq.n	80018f4 <HAL_RCC_OscConfig+0x12c>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d168      	bne.n	80018f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e246      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800182e:	d106      	bne.n	800183e <HAL_RCC_OscConfig+0x76>
 8001830:	4b80      	ldr	r3, [pc, #512]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a7f      	ldr	r2, [pc, #508]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 8001836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	e02e      	b.n	800189c <HAL_RCC_OscConfig+0xd4>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10c      	bne.n	8001860 <HAL_RCC_OscConfig+0x98>
 8001846:	4b7b      	ldr	r3, [pc, #492]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a7a      	ldr	r2, [pc, #488]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 800184c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	4b78      	ldr	r3, [pc, #480]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a77      	ldr	r2, [pc, #476]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 8001858:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	e01d      	b.n	800189c <HAL_RCC_OscConfig+0xd4>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001868:	d10c      	bne.n	8001884 <HAL_RCC_OscConfig+0xbc>
 800186a:	4b72      	ldr	r3, [pc, #456]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a71      	ldr	r2, [pc, #452]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 8001870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	4b6f      	ldr	r3, [pc, #444]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a6e      	ldr	r2, [pc, #440]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 800187c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	e00b      	b.n	800189c <HAL_RCC_OscConfig+0xd4>
 8001884:	4b6b      	ldr	r3, [pc, #428]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a6a      	ldr	r2, [pc, #424]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 800188a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	4b68      	ldr	r3, [pc, #416]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a67      	ldr	r2, [pc, #412]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 8001896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800189a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d013      	beq.n	80018cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7ff fcb6 	bl	8001214 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018ac:	f7ff fcb2 	bl	8001214 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b64      	cmp	r3, #100	; 0x64
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e1fa      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018be:	4b5d      	ldr	r3, [pc, #372]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0f0      	beq.n	80018ac <HAL_RCC_OscConfig+0xe4>
 80018ca:	e014      	b.n	80018f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7ff fca2 	bl	8001214 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d4:	f7ff fc9e 	bl	8001214 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b64      	cmp	r3, #100	; 0x64
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e1e6      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e6:	4b53      	ldr	r3, [pc, #332]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_OscConfig+0x10c>
 80018f2:	e000      	b.n	80018f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d063      	beq.n	80019ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001902:	4b4c      	ldr	r3, [pc, #304]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 030c 	and.w	r3, r3, #12
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00b      	beq.n	8001926 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800190e:	4b49      	ldr	r3, [pc, #292]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 030c 	and.w	r3, r3, #12
 8001916:	2b08      	cmp	r3, #8
 8001918:	d11c      	bne.n	8001954 <HAL_RCC_OscConfig+0x18c>
 800191a:	4b46      	ldr	r3, [pc, #280]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d116      	bne.n	8001954 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001926:	4b43      	ldr	r3, [pc, #268]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d005      	beq.n	800193e <HAL_RCC_OscConfig+0x176>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d001      	beq.n	800193e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e1ba      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193e:	4b3d      	ldr	r3, [pc, #244]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	4939      	ldr	r1, [pc, #228]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 800194e:	4313      	orrs	r3, r2
 8001950:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001952:	e03a      	b.n	80019ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d020      	beq.n	800199e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800195c:	4b36      	ldr	r3, [pc, #216]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 800195e:	2201      	movs	r2, #1
 8001960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001962:	f7ff fc57 	bl	8001214 <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800196a:	f7ff fc53 	bl	8001214 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e19b      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197c:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0f0      	beq.n	800196a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001988:	4b2a      	ldr	r3, [pc, #168]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	4927      	ldr	r1, [pc, #156]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 8001998:	4313      	orrs	r3, r2
 800199a:	600b      	str	r3, [r1, #0]
 800199c:	e015      	b.n	80019ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800199e:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a4:	f7ff fc36 	bl	8001214 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ac:	f7ff fc32 	bl	8001214 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e17a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019be:	4b1d      	ldr	r3, [pc, #116]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d03a      	beq.n	8001a4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d019      	beq.n	8001a12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019de:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <HAL_RCC_OscConfig+0x274>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e4:	f7ff fc16 	bl	8001214 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ec:	f7ff fc12 	bl	8001214 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e15a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019fe:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	f000 fa9a 	bl	8001f44 <RCC_Delay>
 8001a10:	e01c      	b.n	8001a4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_RCC_OscConfig+0x274>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a18:	f7ff fbfc 	bl	8001214 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a1e:	e00f      	b.n	8001a40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a20:	f7ff fbf8 	bl	8001214 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d908      	bls.n	8001a40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e140      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4ec>
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000
 8001a38:	42420000 	.word	0x42420000
 8001a3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a40:	4b9e      	ldr	r3, [pc, #632]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1e9      	bne.n	8001a20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 80a6 	beq.w	8001ba6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a5e:	4b97      	ldr	r3, [pc, #604]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10d      	bne.n	8001a86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a6a:	4b94      	ldr	r3, [pc, #592]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	4a93      	ldr	r2, [pc, #588]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a74:	61d3      	str	r3, [r2, #28]
 8001a76:	4b91      	ldr	r3, [pc, #580]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a82:	2301      	movs	r3, #1
 8001a84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a86:	4b8e      	ldr	r3, [pc, #568]	; (8001cc0 <HAL_RCC_OscConfig+0x4f8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d118      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a92:	4b8b      	ldr	r3, [pc, #556]	; (8001cc0 <HAL_RCC_OscConfig+0x4f8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a8a      	ldr	r2, [pc, #552]	; (8001cc0 <HAL_RCC_OscConfig+0x4f8>)
 8001a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a9e:	f7ff fbb9 	bl	8001214 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aa6:	f7ff fbb5 	bl	8001214 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b64      	cmp	r3, #100	; 0x64
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e0fd      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab8:	4b81      	ldr	r3, [pc, #516]	; (8001cc0 <HAL_RCC_OscConfig+0x4f8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0f0      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d106      	bne.n	8001ada <HAL_RCC_OscConfig+0x312>
 8001acc:	4b7b      	ldr	r3, [pc, #492]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	4a7a      	ldr	r2, [pc, #488]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6213      	str	r3, [r2, #32]
 8001ad8:	e02d      	b.n	8001b36 <HAL_RCC_OscConfig+0x36e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10c      	bne.n	8001afc <HAL_RCC_OscConfig+0x334>
 8001ae2:	4b76      	ldr	r3, [pc, #472]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	4a75      	ldr	r2, [pc, #468]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001ae8:	f023 0301 	bic.w	r3, r3, #1
 8001aec:	6213      	str	r3, [r2, #32]
 8001aee:	4b73      	ldr	r3, [pc, #460]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	4a72      	ldr	r2, [pc, #456]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001af4:	f023 0304 	bic.w	r3, r3, #4
 8001af8:	6213      	str	r3, [r2, #32]
 8001afa:	e01c      	b.n	8001b36 <HAL_RCC_OscConfig+0x36e>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	2b05      	cmp	r3, #5
 8001b02:	d10c      	bne.n	8001b1e <HAL_RCC_OscConfig+0x356>
 8001b04:	4b6d      	ldr	r3, [pc, #436]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	4a6c      	ldr	r2, [pc, #432]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001b0a:	f043 0304 	orr.w	r3, r3, #4
 8001b0e:	6213      	str	r3, [r2, #32]
 8001b10:	4b6a      	ldr	r3, [pc, #424]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	4a69      	ldr	r2, [pc, #420]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6213      	str	r3, [r2, #32]
 8001b1c:	e00b      	b.n	8001b36 <HAL_RCC_OscConfig+0x36e>
 8001b1e:	4b67      	ldr	r3, [pc, #412]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	4a66      	ldr	r2, [pc, #408]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	6213      	str	r3, [r2, #32]
 8001b2a:	4b64      	ldr	r3, [pc, #400]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	4a63      	ldr	r2, [pc, #396]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001b30:	f023 0304 	bic.w	r3, r3, #4
 8001b34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d015      	beq.n	8001b6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b3e:	f7ff fb69 	bl	8001214 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b44:	e00a      	b.n	8001b5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b46:	f7ff fb65 	bl	8001214 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e0ab      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b5c:	4b57      	ldr	r3, [pc, #348]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0ee      	beq.n	8001b46 <HAL_RCC_OscConfig+0x37e>
 8001b68:	e014      	b.n	8001b94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6a:	f7ff fb53 	bl	8001214 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b70:	e00a      	b.n	8001b88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b72:	f7ff fb4f 	bl	8001214 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e095      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b88:	4b4c      	ldr	r3, [pc, #304]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1ee      	bne.n	8001b72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b94:	7dfb      	ldrb	r3, [r7, #23]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d105      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b9a:	4b48      	ldr	r3, [pc, #288]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	4a47      	ldr	r2, [pc, #284]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 8081 	beq.w	8001cb2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bb0:	4b42      	ldr	r3, [pc, #264]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 030c 	and.w	r3, r3, #12
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d061      	beq.n	8001c80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69db      	ldr	r3, [r3, #28]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d146      	bne.n	8001c52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc4:	4b3f      	ldr	r3, [pc, #252]	; (8001cc4 <HAL_RCC_OscConfig+0x4fc>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bca:	f7ff fb23 	bl	8001214 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd2:	f7ff fb1f 	bl	8001214 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e067      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be4:	4b35      	ldr	r3, [pc, #212]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f0      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf8:	d108      	bne.n	8001c0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bfa:	4b30      	ldr	r3, [pc, #192]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	492d      	ldr	r1, [pc, #180]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c0c:	4b2b      	ldr	r3, [pc, #172]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a19      	ldr	r1, [r3, #32]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	430b      	orrs	r3, r1
 8001c1e:	4927      	ldr	r1, [pc, #156]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c24:	4b27      	ldr	r3, [pc, #156]	; (8001cc4 <HAL_RCC_OscConfig+0x4fc>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2a:	f7ff faf3 	bl	8001214 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c32:	f7ff faef 	bl	8001214 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e037      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c44:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCC_OscConfig+0x46a>
 8001c50:	e02f      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c52:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <HAL_RCC_OscConfig+0x4fc>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff fadc 	bl	8001214 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c60:	f7ff fad8 	bl	8001214 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e020      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c72:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x498>
 8001c7e:	e018      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e013      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <HAL_RCC_OscConfig+0x4f4>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d106      	bne.n	8001cae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d001      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40007000 	.word	0x40007000
 8001cc4:	42420060 	.word	0x42420060

08001cc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e0d0      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cdc:	4b6a      	ldr	r3, [pc, #424]	; (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d910      	bls.n	8001d0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cea:	4b67      	ldr	r3, [pc, #412]	; (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f023 0207 	bic.w	r2, r3, #7
 8001cf2:	4965      	ldr	r1, [pc, #404]	; (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfa:	4b63      	ldr	r3, [pc, #396]	; (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e0b8      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d020      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d005      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d24:	4b59      	ldr	r3, [pc, #356]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	4a58      	ldr	r2, [pc, #352]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d3c:	4b53      	ldr	r3, [pc, #332]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	4a52      	ldr	r2, [pc, #328]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d48:	4b50      	ldr	r3, [pc, #320]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	494d      	ldr	r1, [pc, #308]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d040      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d107      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6e:	4b47      	ldr	r3, [pc, #284]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d115      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e07f      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d107      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d86:	4b41      	ldr	r3, [pc, #260]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e073      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d96:	4b3d      	ldr	r3, [pc, #244]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e06b      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001da6:	4b39      	ldr	r3, [pc, #228]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f023 0203 	bic.w	r2, r3, #3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	4936      	ldr	r1, [pc, #216]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001db8:	f7ff fa2c 	bl	8001214 <HAL_GetTick>
 8001dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbe:	e00a      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc0:	f7ff fa28 	bl	8001214 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e053      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd6:	4b2d      	ldr	r3, [pc, #180]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 020c 	and.w	r2, r3, #12
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d1eb      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001de8:	4b27      	ldr	r3, [pc, #156]	; (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d210      	bcs.n	8001e18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df6:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 0207 	bic.w	r2, r3, #7
 8001dfe:	4922      	ldr	r1, [pc, #136]	; (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e06:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d001      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e032      	b.n	8001e7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d008      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e24:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	4916      	ldr	r1, [pc, #88]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d009      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e42:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	490e      	ldr	r1, [pc, #56]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e56:	f000 f821 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	091b      	lsrs	r3, r3, #4
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	490a      	ldr	r1, [pc, #40]	; (8001e90 <HAL_RCC_ClockConfig+0x1c8>)
 8001e68:	5ccb      	ldrb	r3, [r1, r3]
 8001e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6e:	4a09      	ldr	r2, [pc, #36]	; (8001e94 <HAL_RCC_ClockConfig+0x1cc>)
 8001e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <HAL_RCC_ClockConfig+0x1d0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff f98a 	bl	8001190 <HAL_InitTick>

  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40022000 	.word	0x40022000
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	080027b4 	.word	0x080027b4
 8001e94:	20000044 	.word	0x20000044
 8001e98:	20000048 	.word	0x20000048

08001e9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001eb6:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x94>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d002      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0x30>
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d003      	beq.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x36>
 8001eca:	e027      	b.n	8001f1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ecc:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ece:	613b      	str	r3, [r7, #16]
      break;
 8001ed0:	e027      	b.n	8001f22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	0c9b      	lsrs	r3, r3, #18
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	4a17      	ldr	r2, [pc, #92]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001edc:	5cd3      	ldrb	r3, [r2, r3]
 8001ede:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d010      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eea:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x94>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	0c5b      	lsrs	r3, r3, #17
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	4a11      	ldr	r2, [pc, #68]	; (8001f3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ef6:	5cd3      	ldrb	r3, [r2, r3]
 8001ef8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a0d      	ldr	r2, [pc, #52]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8001efe:	fb02 f203 	mul.w	r2, r2, r3
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	e004      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a0c      	ldr	r2, [pc, #48]	; (8001f40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f10:	fb02 f303 	mul.w	r3, r2, r3
 8001f14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	613b      	str	r3, [r7, #16]
      break;
 8001f1a:	e002      	b.n	8001f22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f1e:	613b      	str	r3, [r7, #16]
      break;
 8001f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f22:	693b      	ldr	r3, [r7, #16]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	371c      	adds	r7, #28
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40021000 	.word	0x40021000
 8001f34:	007a1200 	.word	0x007a1200
 8001f38:	080027c4 	.word	0x080027c4
 8001f3c:	080027d4 	.word	0x080027d4
 8001f40:	003d0900 	.word	0x003d0900

08001f44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <RCC_Delay+0x34>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <RCC_Delay+0x38>)
 8001f52:	fba2 2303 	umull	r2, r3, r2, r3
 8001f56:	0a5b      	lsrs	r3, r3, #9
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	fb02 f303 	mul.w	r3, r2, r3
 8001f5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f60:	bf00      	nop
  }
  while (Delay --);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1e5a      	subs	r2, r3, #1
 8001f66:	60fa      	str	r2, [r7, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1f9      	bne.n	8001f60 <RCC_Delay+0x1c>
}
 8001f6c:	bf00      	nop
 8001f6e:	bf00      	nop
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	20000044 	.word	0x20000044
 8001f7c:	10624dd3 	.word	0x10624dd3

08001f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e041      	b.n	8002016 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d106      	bne.n	8001fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7fe ff9a 	bl	8000ee0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2202      	movs	r2, #2
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3304      	adds	r3, #4
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	f000 fa56 	bl	8002470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b01      	cmp	r3, #1
 8002032:	d001      	beq.n	8002038 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e035      	b.n	80020a4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2202      	movs	r2, #2
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a16      	ldr	r2, [pc, #88]	; (80020b0 <HAL_TIM_Base_Start_IT+0x90>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d009      	beq.n	800206e <HAL_TIM_Base_Start_IT+0x4e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002062:	d004      	beq.n	800206e <HAL_TIM_Base_Start_IT+0x4e>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a12      	ldr	r2, [pc, #72]	; (80020b4 <HAL_TIM_Base_Start_IT+0x94>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d111      	bne.n	8002092 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2b06      	cmp	r3, #6
 800207e:	d010      	beq.n	80020a2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002090:	e007      	b.n	80020a2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0201 	orr.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40012c00 	.word	0x40012c00
 80020b4:	40000400 	.word	0x40000400

080020b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d020      	beq.n	800211c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d01b      	beq.n	800211c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f06f 0202 	mvn.w	r2, #2
 80020ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f998 	bl	8002438 <HAL_TIM_IC_CaptureCallback>
 8002108:	e005      	b.n	8002116 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f98b 	bl	8002426 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 f99a 	bl	800244a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	2b00      	cmp	r3, #0
 8002124:	d020      	beq.n	8002168 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d01b      	beq.n	8002168 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0204 	mvn.w	r2, #4
 8002138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2202      	movs	r2, #2
 800213e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f972 	bl	8002438 <HAL_TIM_IC_CaptureCallback>
 8002154:	e005      	b.n	8002162 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f965 	bl	8002426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f974 	bl	800244a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d020      	beq.n	80021b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	d01b      	beq.n	80021b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0208 	mvn.w	r2, #8
 8002184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2204      	movs	r2, #4
 800218a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f94c 	bl	8002438 <HAL_TIM_IC_CaptureCallback>
 80021a0:	e005      	b.n	80021ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f93f 	bl	8002426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f94e 	bl	800244a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d020      	beq.n	8002200 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f003 0310 	and.w	r3, r3, #16
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d01b      	beq.n	8002200 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f06f 0210 	mvn.w	r2, #16
 80021d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2208      	movs	r2, #8
 80021d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f926 	bl	8002438 <HAL_TIM_IC_CaptureCallback>
 80021ec:	e005      	b.n	80021fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f919 	bl	8002426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f928 	bl	800244a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00c      	beq.n	8002224 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b00      	cmp	r3, #0
 8002212:	d007      	beq.n	8002224 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f06f 0201 	mvn.w	r2, #1
 800221c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7fe fdb0 	bl	8000d84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00c      	beq.n	8002248 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002234:	2b00      	cmp	r3, #0
 8002236:	d007      	beq.n	8002248 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 fa6f 	bl	8002726 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00c      	beq.n	800226c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002258:	2b00      	cmp	r3, #0
 800225a:	d007      	beq.n	800226c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f8f8 	bl	800245c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f003 0320 	and.w	r3, r3, #32
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00c      	beq.n	8002290 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f003 0320 	and.w	r3, r3, #32
 800227c:	2b00      	cmp	r3, #0
 800227e:	d007      	beq.n	8002290 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f06f 0220 	mvn.w	r2, #32
 8002288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 fa42 	bl	8002714 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002290:	bf00      	nop
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_TIM_ConfigClockSource+0x1c>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e0b4      	b.n	800241e <HAL_TIM_ConfigClockSource+0x186>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ec:	d03e      	beq.n	800236c <HAL_TIM_ConfigClockSource+0xd4>
 80022ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022f2:	f200 8087 	bhi.w	8002404 <HAL_TIM_ConfigClockSource+0x16c>
 80022f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022fa:	f000 8086 	beq.w	800240a <HAL_TIM_ConfigClockSource+0x172>
 80022fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002302:	d87f      	bhi.n	8002404 <HAL_TIM_ConfigClockSource+0x16c>
 8002304:	2b70      	cmp	r3, #112	; 0x70
 8002306:	d01a      	beq.n	800233e <HAL_TIM_ConfigClockSource+0xa6>
 8002308:	2b70      	cmp	r3, #112	; 0x70
 800230a:	d87b      	bhi.n	8002404 <HAL_TIM_ConfigClockSource+0x16c>
 800230c:	2b60      	cmp	r3, #96	; 0x60
 800230e:	d050      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x11a>
 8002310:	2b60      	cmp	r3, #96	; 0x60
 8002312:	d877      	bhi.n	8002404 <HAL_TIM_ConfigClockSource+0x16c>
 8002314:	2b50      	cmp	r3, #80	; 0x50
 8002316:	d03c      	beq.n	8002392 <HAL_TIM_ConfigClockSource+0xfa>
 8002318:	2b50      	cmp	r3, #80	; 0x50
 800231a:	d873      	bhi.n	8002404 <HAL_TIM_ConfigClockSource+0x16c>
 800231c:	2b40      	cmp	r3, #64	; 0x40
 800231e:	d058      	beq.n	80023d2 <HAL_TIM_ConfigClockSource+0x13a>
 8002320:	2b40      	cmp	r3, #64	; 0x40
 8002322:	d86f      	bhi.n	8002404 <HAL_TIM_ConfigClockSource+0x16c>
 8002324:	2b30      	cmp	r3, #48	; 0x30
 8002326:	d064      	beq.n	80023f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002328:	2b30      	cmp	r3, #48	; 0x30
 800232a:	d86b      	bhi.n	8002404 <HAL_TIM_ConfigClockSource+0x16c>
 800232c:	2b20      	cmp	r3, #32
 800232e:	d060      	beq.n	80023f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002330:	2b20      	cmp	r3, #32
 8002332:	d867      	bhi.n	8002404 <HAL_TIM_ConfigClockSource+0x16c>
 8002334:	2b00      	cmp	r3, #0
 8002336:	d05c      	beq.n	80023f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002338:	2b10      	cmp	r3, #16
 800233a:	d05a      	beq.n	80023f2 <HAL_TIM_ConfigClockSource+0x15a>
 800233c:	e062      	b.n	8002404 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	6899      	ldr	r1, [r3, #8]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f000 f96a 	bl	8002626 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002360:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	609a      	str	r2, [r3, #8]
      break;
 800236a:	e04f      	b.n	800240c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6818      	ldr	r0, [r3, #0]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	6899      	ldr	r1, [r3, #8]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	f000 f953 	bl	8002626 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800238e:	609a      	str	r2, [r3, #8]
      break;
 8002390:	e03c      	b.n	800240c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6859      	ldr	r1, [r3, #4]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	461a      	mov	r2, r3
 80023a0:	f000 f8ca 	bl	8002538 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2150      	movs	r1, #80	; 0x50
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f921 	bl	80025f2 <TIM_ITRx_SetConfig>
      break;
 80023b0:	e02c      	b.n	800240c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	6859      	ldr	r1, [r3, #4]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	461a      	mov	r2, r3
 80023c0:	f000 f8e8 	bl	8002594 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2160      	movs	r1, #96	; 0x60
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 f911 	bl	80025f2 <TIM_ITRx_SetConfig>
      break;
 80023d0:	e01c      	b.n	800240c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	6859      	ldr	r1, [r3, #4]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	461a      	mov	r2, r3
 80023e0:	f000 f8aa 	bl	8002538 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2140      	movs	r1, #64	; 0x40
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 f901 	bl	80025f2 <TIM_ITRx_SetConfig>
      break;
 80023f0:	e00c      	b.n	800240c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4619      	mov	r1, r3
 80023fc:	4610      	mov	r0, r2
 80023fe:	f000 f8f8 	bl	80025f2 <TIM_ITRx_SetConfig>
      break;
 8002402:	e003      	b.n	800240c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
      break;
 8002408:	e000      	b.n	800240c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800240a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800241c:	7bfb      	ldrb	r3, [r7, #15]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr
	...

08002470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a2b      	ldr	r2, [pc, #172]	; (8002530 <TIM_Base_SetConfig+0xc0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d007      	beq.n	8002498 <TIM_Base_SetConfig+0x28>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800248e:	d003      	beq.n	8002498 <TIM_Base_SetConfig+0x28>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a28      	ldr	r2, [pc, #160]	; (8002534 <TIM_Base_SetConfig+0xc4>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d108      	bne.n	80024aa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800249e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a20      	ldr	r2, [pc, #128]	; (8002530 <TIM_Base_SetConfig+0xc0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d007      	beq.n	80024c2 <TIM_Base_SetConfig+0x52>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b8:	d003      	beq.n	80024c2 <TIM_Base_SetConfig+0x52>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a1d      	ldr	r2, [pc, #116]	; (8002534 <TIM_Base_SetConfig+0xc4>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d108      	bne.n	80024d4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	4313      	orrs	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a0d      	ldr	r2, [pc, #52]	; (8002530 <TIM_Base_SetConfig+0xc0>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d103      	bne.n	8002508 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	691a      	ldr	r2, [r3, #16]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d005      	beq.n	8002526 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f023 0201 	bic.w	r2, r3, #1
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	611a      	str	r2, [r3, #16]
  }
}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr
 8002530:	40012c00 	.word	0x40012c00
 8002534:	40000400 	.word	0x40000400

08002538 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002538:	b480      	push	{r7}
 800253a:	b087      	sub	sp, #28
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	f023 0201 	bic.w	r2, r3, #1
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f023 030a 	bic.w	r3, r3, #10
 8002574:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	4313      	orrs	r3, r2
 800257c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	621a      	str	r2, [r3, #32]
}
 800258a:	bf00      	nop
 800258c:	371c      	adds	r7, #28
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002594:	b480      	push	{r7}
 8002596:	b087      	sub	sp, #28
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	f023 0210 	bic.w	r2, r3, #16
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	031b      	lsls	r3, r3, #12
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	4313      	orrs	r3, r2
 80025da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	621a      	str	r2, [r3, #32]
}
 80025e8:	bf00      	nop
 80025ea:	371c      	adds	r7, #28
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr

080025f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b085      	sub	sp, #20
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002608:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4313      	orrs	r3, r2
 8002610:	f043 0307 	orr.w	r3, r3, #7
 8002614:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	609a      	str	r2, [r3, #8]
}
 800261c:	bf00      	nop
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr

08002626 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002626:	b480      	push	{r7}
 8002628:	b087      	sub	sp, #28
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002640:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	021a      	lsls	r2, r3, #8
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	431a      	orrs	r2, r3
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	4313      	orrs	r3, r2
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	609a      	str	r2, [r3, #8]
}
 800265a:	bf00      	nop
 800265c:	371c      	adds	r7, #28
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr

08002664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002678:	2302      	movs	r3, #2
 800267a:	e041      	b.n	8002700 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2202      	movs	r2, #2
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a14      	ldr	r2, [pc, #80]	; (800270c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d009      	beq.n	80026d4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c8:	d004      	beq.n	80026d4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a10      	ldr	r2, [pc, #64]	; (8002710 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d10c      	bne.n	80026ee <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40012c00 	.word	0x40012c00
 8002710:	40000400 	.word	0x40000400

08002714 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr

08002726 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <__libc_init_array>:
 8002738:	b570      	push	{r4, r5, r6, lr}
 800273a:	2600      	movs	r6, #0
 800273c:	4d0c      	ldr	r5, [pc, #48]	; (8002770 <__libc_init_array+0x38>)
 800273e:	4c0d      	ldr	r4, [pc, #52]	; (8002774 <__libc_init_array+0x3c>)
 8002740:	1b64      	subs	r4, r4, r5
 8002742:	10a4      	asrs	r4, r4, #2
 8002744:	42a6      	cmp	r6, r4
 8002746:	d109      	bne.n	800275c <__libc_init_array+0x24>
 8002748:	f000 f822 	bl	8002790 <_init>
 800274c:	2600      	movs	r6, #0
 800274e:	4d0a      	ldr	r5, [pc, #40]	; (8002778 <__libc_init_array+0x40>)
 8002750:	4c0a      	ldr	r4, [pc, #40]	; (800277c <__libc_init_array+0x44>)
 8002752:	1b64      	subs	r4, r4, r5
 8002754:	10a4      	asrs	r4, r4, #2
 8002756:	42a6      	cmp	r6, r4
 8002758:	d105      	bne.n	8002766 <__libc_init_array+0x2e>
 800275a:	bd70      	pop	{r4, r5, r6, pc}
 800275c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002760:	4798      	blx	r3
 8002762:	3601      	adds	r6, #1
 8002764:	e7ee      	b.n	8002744 <__libc_init_array+0xc>
 8002766:	f855 3b04 	ldr.w	r3, [r5], #4
 800276a:	4798      	blx	r3
 800276c:	3601      	adds	r6, #1
 800276e:	e7f2      	b.n	8002756 <__libc_init_array+0x1e>
 8002770:	080027d8 	.word	0x080027d8
 8002774:	080027d8 	.word	0x080027d8
 8002778:	080027d8 	.word	0x080027d8
 800277c:	080027dc 	.word	0x080027dc

08002780 <memset>:
 8002780:	4603      	mov	r3, r0
 8002782:	4402      	add	r2, r0
 8002784:	4293      	cmp	r3, r2
 8002786:	d100      	bne.n	800278a <memset+0xa>
 8002788:	4770      	bx	lr
 800278a:	f803 1b01 	strb.w	r1, [r3], #1
 800278e:	e7f9      	b.n	8002784 <memset+0x4>

08002790 <_init>:
 8002790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002792:	bf00      	nop
 8002794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002796:	bc08      	pop	{r3}
 8002798:	469e      	mov	lr, r3
 800279a:	4770      	bx	lr

0800279c <_fini>:
 800279c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800279e:	bf00      	nop
 80027a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027a2:	bc08      	pop	{r3}
 80027a4:	469e      	mov	lr, r3
 80027a6:	4770      	bx	lr
