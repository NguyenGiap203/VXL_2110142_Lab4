/*
 * button.c
 *
 *  Created on: Nov 11, 2024
 *      Author: NGUYEN GIAP
 */

#include "button.h"
#include "main.h"
#include "software_timer.h" // to use TIMER_TICK

//int button1_flag = 0;
//
//int KeyReg0 = NORMAL_STATE;
//int KeyReg1 = NORMAL_STATE;
//int KeyReg2 = NORMAL_STATE;
//
//int KeyReg3 = NORMAL_STATE; // Trang thai on dinh truoc do (su dung cho nhan de)
//int TimerForKeyPress = 1000 / TIMER_TICK; // 1000ms
//
//int isButton1Pressed(){
//	if(button1_flag == 1){
//		button1_flag = 0;
//		return 1;
//	}
//	return 0;
//}
//
//void subKeyProcess(){
//	//TODO
//	button1_flag = 1;
//}
//
//void getKeyInput(){
//	KeyReg0 = KeyReg1;
//	KeyReg1 = KeyReg2;
//	KeyReg2 = HAL_GPIO_ReadPin(BUT1_GPIO_Port, BUT1_Pin);
//	if((KeyReg0 == KeyReg1) && (KeyReg1 == KeyReg2)){
//		if(KeyReg3 != KeyReg2){
//			KeyReg3 = KeyReg2;
//			if(KeyReg2 == PRESSED_STATE){
//				//TODO
//				subKeyProcess();
//				TimerForKeyPress = 200;
//			}
//		}else{
//			TimerForKeyPress--;
//			if(TimerForKeyPress == 0){
//				//TODO
//				if(KeyReg2 == PRESSED_STATE){
//					subKeyProcess();
//				}
//				TimerForKeyPress = 200;
//			}
//		}
//	}
//}

#define NO_OF_BUTTONS	3
//timer interrupt duration is TIMER_TICK
#define DURATION_FOR_AUTO_INCREASING	1000/TIMER_TICK //1000ms
#define PRESSED_STATE	GPIO_PIN_RESET
#define RELEASED_STATE	GPIO_PIN_SET

// the buffer that the fianl result is stored after debouncing
static GPIO_PinState buttonBuffer[NO_OF_BUTTONS];
// we define three buffers for debouncing
static GPIO_PinState debounceBuffer1[NO_OF_BUTTONS];
static GPIO_PinState debounceBuffer2[NO_OF_BUTTONS];
static GPIO_PinState debounceBuffer3[NO_OF_BUTTONS];
// we define a flag for button pressed more than 1 second
static uint8_t flagPress1s[NO_OF_BUTTONS];
// we define counter for automatically increasing the value after the button is pressed more than 1 second
static uint16_t counterPress1s[NO_OF_BUTTONS];

static GPIO_TypeDef* ButtonPorts[NO_OF_BUTTONS] = {BUT1_GPIO_Port, BUT2_GPIO_Port, BUT3_GPIO_Port};
static uint16_t ButtonPins[NO_OF_BUTTONS] = {BUT1_Pin, BUT2_Pin, BUT3_Pin};

void getKeyInput(){
	for(int i = 0; i < NO_OF_BUTTONS; i++){
		debounceBuffer1[i] = debounceBuffer2[i];
		debounceBuffer2[i] = debounceBuffer3[i];
		debounceBuffer3[i] = HAL_GPIO_ReadPin(ButtonPorts[i], ButtonPins[i]);

		if((debounceBuffer1[i] == debounceBuffer2[i]) && (debounceBuffer2[i] == debounceBuffer3[i])){
			buttonBuffer[i] = debounceBuffer1[i];

			if(buttonBuffer[i] == PRESSED_STATE){
				if(counterPress1s[i] < DURATION_FOR_AUTO_INCREASING){
					counterPress1s[i]++;
				} else {
					flagPress1s[i] = 1; // turn on the flag when 1 second passed since the button is pressed
				}
			} else {
				counterPress1s[i] = 0; // reset counter if the button is not pressed
				flagPress1s[i] = 0; // reset the flag
			}
		}
	}
}










