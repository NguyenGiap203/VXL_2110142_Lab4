/*
 * button.c
 *
 *  Created on: Nov 11, 2024
 *      Author: NGUYEN GIAP
 */

#include "button.h"
#include "main.h"
#include "software_timer.h"

//int button1_flag = 0;
//
//int KeyReg0 = NORMAL_STATE;
//int KeyReg1 = NORMAL_STATE;
//int KeyReg2 = NORMAL_STATE;
//
//int KeyReg3 = NORMAL_STATE; // Trang thai on dinh truoc do (su dung cho nhan de)
//int TimerForKeyPress = 1000 / TIMER_TICK; // 1000ms
//
//int isButton1Pressed(){
//	if(button1_flag == 1){
//		button1_flag = 0;
//		return 1;
//	}
//	return 0;
//}
//
//void subKeyProcess(){
//	//TODO
//	button1_flag = 1;
//}
//
//void getKeyInput(){
//	KeyReg0 = KeyReg1;
//	KeyReg1 = KeyReg2;
//	KeyReg2 = HAL_GPIO_ReadPin(BUT1_GPIO_Port, BUT1_Pin);
//	if((KeyReg0 == KeyReg1) && (KeyReg1 == KeyReg2)){
//		if(KeyReg3 != KeyReg2){
//			KeyReg3 = KeyReg2;
//			if(KeyReg2 == PRESSED_STATE){
//				//TODO
//				subKeyProcess();
//				TimerForKeyPress = 200;
//			}
//		}else{
//			TimerForKeyPress--;
//			if(TimerForKeyPress == 0){
//				//TODO
//				if(KeyReg2 == PRESSED_STATE){
//					subKeyProcess();
//				}
//				TimerForKeyPress = 200;
//			}
//		}
//	}
//}

#define NO_OF_BUTTONS	3
//timer interrupt duration is TIMER_TICK
#define DURATION_FOR_AUTO_INCREASING	1000/TIMER_TICK //1000ms
#define PRESSED_STATE	GPIO_PIN_RESET
#define RELEASED_STATE	GPIO_PIN_SET

// the buffer that the fianl result is stored after debouncing
static GPIO_PinState buttonBuffer[NO_OF_BUTTONS];
// we define two buffers for debouncing
static GPIO_PinState debounceButtonBuffer1[NO_OF_BUTTONS];
static GPIO_PinState debounceButtonBuffer2[NO_OF_BUTTONS];
// we define a flag for button pressed more than 1 second
static uint8_t flagForButtonPress1s[NO_OF_BUTTONS];












